import { CompletionItem } from "./completion"

interface Instruction extends CompletionItem {
  isPseudo:boolean;
}

export const instructions:Instruction[] = [
  {isPseudo:false,label:"nop",labelDetails:{description:"Null operation"},kind:14,documentation:"machine code is all zeroes"},
  {isPseudo:false,label:"add",labelDetails:{detail:" $t1,$t2,$t3",description:"Addition with overflow"},kind:3,documentation:"set $t1 to ($t2 plus $t3)"},
  {isPseudo:false,label:"sub",labelDetails:{detail:" $t1,$t2,$t3",description:"Subtraction with overflow"},kind:3,documentation:"set $t1 to ($t2 minus $t3)"},
  {isPseudo:false,label:"addi",labelDetails:{detail:" $t1,$t2,-100",description:"Addition immediate with overflow"},kind:3,documentation:"set $t1 to ($t2 plus signed 16-bit immediate)"},
  {isPseudo:false,label:"addu",labelDetails:{detail:" $t1,$t2,$t3",description:"Addition unsigned without overflow"},kind:3,documentation:"set $t1 to ($t2 plus $t3), no overflow"},
  {isPseudo:false,label:"subu",labelDetails:{detail:" $t1,$t2,$t3",description:"Subtraction unsigned without overflow"},kind:3,documentation:"set $t1 to ($t2 minus $t3), no overflow"},
  {isPseudo:false,label:"addiu",labelDetails:{detail:" $t1,$t2,-100",description:"Addition immediate unsigned without overflow"},kind:3,documentation:"set $t1 to ($t2 plus signed 16-bit immediate), no overflow"},
  {isPseudo:false,label:"mult",labelDetails:{detail:" $t1,$t2",description:"Multiplication"},kind:3,documentation:"Set hi to high-order 32 bits, lo to low-order 32 bits of the product of $t1 and $t2 (use mfhi to access hi, mflo to access lo)"},
  {isPseudo:false,label:"multu",labelDetails:{detail:" $t1,$t2",description:"Multiplication unsigned"},kind:3,documentation:"Set HI to high-order 32 bits, LO to low-order 32 bits of the product of unsigned $t1 and $t2 (use mfhi to access HI, mflo to access LO)"},
  {isPseudo:false,label:"mul",labelDetails:{detail:" $t1,$t2,$t3",description:"Multiplication without overflow"},kind:3,documentation:"Set HI to high-order 32 bits, LO and $t1 to low-order 32 bits of the product of $t2 and $t3 (use mfhi to access HI, mflo to access LO)"},
  {isPseudo:false,label:"madd",labelDetails:{detail:" $t1,$t2",description:"Multiply add"},kind:3,documentation:"Multiply $t1 by $t2 then increment HI by high-order 32 bits of product, increment LO by low-order 32 bits of product (use mfhi to access HI, mflo to access LO)"},
  {isPseudo:false,label:"maddu",labelDetails:{detail:" $t1,$t2",description:"Multiply add unsigned"},kind:3,documentation:"Multiply $t1 by $t2 then increment HI by high-order 32 bits of product, increment LO by low-order 32 bits of product, unsigned (use mfhi to access HI, mflo to access LO)"},
  {isPseudo:false,label:"msub",labelDetails:{detail:" $t1,$t2",description:"Multiply subtract"},kind:3,documentation:"Multiply $t1 by $t2 then decrement HI by high-order 32 bits of product, decrement LO by low-order 32 bits of product (use mfhi to access HI, mflo to access LO)"},
  {isPseudo:false,label:"msubu",labelDetails:{detail:" $t1,$t2",description:"Multiply subtract unsigned"},kind:3,documentation:"Multiply $t1 by $t2 then decrement HI by high-order 32 bits of product, decement LO by low-order 32 bits of product, unsigned (use mfhi to access HI, mflo to access LO)"},
  {isPseudo:false,label:"div",labelDetails:{detail:" $t1,$t2",description:"Division with overflow"},kind:3,documentation:"Divide $t1 by $t2 then set LO to quotient and HI to remainder (use mfhi to access HI, mflo to access LO)"},
  {isPseudo:false,label:"divu",labelDetails:{detail:" $t1,$t2",description:"Division unsigned without overflow"},kind:3,documentation:"Divide unsigned $t1 by $t2 then set LO to quotient and HI to remainder (use mfhi to access HI, mflo to access LO)"},
  {isPseudo:false,label:"mfhi",labelDetails:{detail:" $t1",description:"Move from HI register"},kind:3,documentation:"Set $t1 to contents of HI (see multiply and divide operations)"},
  {isPseudo:false,label:"mflo",labelDetails:{detail:" $t1",description:"Move from LO register"},kind:3,documentation:"Set $t1 to contents of LO (see multiply and divide operations)"},
  {isPseudo:false,label:"mthi",labelDetails:{detail:" $t1",description:"Move to HI registerr"},kind:3,documentation:"Set HI to contents of $t1 (see multiply and divide operations)"},
  {isPseudo:false,label:"mtlo",labelDetails:{detail:" $t1",description:"Move to LO register"},kind:3,documentation:"Set LO to contents of $t1 (see multiply and divide operations)"},
  {isPseudo:false,label:"and",labelDetails:{detail:" $t1,$t2,$t3",description:"Bitwise AND"},kind:3,documentation:"Set $t1 to bitwise AND of $t2 and $t3"},
  {isPseudo:false,label:"or",labelDetails:{detail:" $t1,$t2,$t3",description:"Bitwise OR"},kind:3,documentation:"Set $t1 to bitwise OR of $t2 and $t3"},
  {isPseudo:false,label:"andi",labelDetails:{detail:" $t1,$t2,100",description:"Bitwise AND immediate"},kind:3,documentation:"Set $t1 to bitwise AND of $t2 and zero-extended 16-bit immediate"},
  {isPseudo:false,label:"ori",labelDetails:{detail:" $t1,$t2,100",description:"Bitwise OR immediate"},kind:3,documentation:"Set $t1 to bitwise OR of $t2 and zero-extended 16-bit immediate"},
  {isPseudo:false,label:"nor",labelDetails:{detail:" $t1,$t2,$t3",description:"Bitwise NOR"},kind:3,documentation:"Set $t1 to bitwise NOR of $t2 and $t3"},
  {isPseudo:false,label:"xor",labelDetails:{detail:" $t1,$t2,$t3",description:"Bitwise XOR (exclusive OR)"},kind:3,documentation:"Set $t1 to bitwise XOR of $t2 and $t3"},
  {isPseudo:false,label:"xori",labelDetails:{detail:" $t1,$t2,100",description:"Bitwise XOR immediate"},kind:3,documentation:"Set $t1 to bitwise XOR of $t2 and zero-extended 16-bit immediate"},
  {isPseudo:false,label:"sll",labelDetails:{detail:" $t1,$t2,10",description:"Shift left logical"},kind:3,documentation:"Set $t1 to result of shifting $t2 left by number of bits specified by immediate"},
  {isPseudo:false,label:"sllv",labelDetails:{detail:" $t1,$t2,$t3",description:"Shift left logical variable"},kind:3,documentation:"Set $t1 to result of shifting $t2 left by number of bits specified by value in low-order 5 bits of $t3"},
  {isPseudo:false,label:"srl",labelDetails:{detail:" $t1,$t2,10",description:"Shift right logical"},kind:3,documentation:"Set $t1 to result of shifting $t2 right by number of bits specified by immediate"},
  {isPseudo:false,label:"sra",labelDetails:{detail:" $t1,$t2,10",description:"Shift right arithmetic"},kind:3,documentation:"Set $t1 to result of sign-extended shifting $t2 right by number of bits specified by immediate"},
  {isPseudo:false,label:"srav",labelDetails:{detail:" $t1,$t2,$t3",description:"Shift right arithmetic variable"},kind:3,documentation:"Set $t1 to result of sign-extended shifting $t2 right by number of bits specified by value in low-order 5 bits of $t3"},
  {isPseudo:false,label:"srlv",labelDetails:{detail:" $t1,$t2,$t3",description:"Shift right logical variable"},kind:3,documentation:"Set $t1 to result of shifting $t2 right by number of bits specified by value in low-order 5 bits of $t3"},
  {isPseudo:false,label:"lw",labelDetails:{detail:" $t1,-100($t2)",description:"Load word"},kind:3,documentation:"Set $t1 to contents of effective memory word address"},
  {isPseudo:false,label:"ll",labelDetails:{detail:" $t1,-100($t2)",description:"Load linked"},kind:3,documentation:"Paired with Store Conditional (sc) to perform atomic read-modify-write. Treated as equivalent to Load Word (lw) because MARS does not simulate multiple processors."},
  {isPseudo:false,label:"lwl",labelDetails:{detail:" $t1,-100($t2)",description:"Load word left"},kind:3,documentation:"Load from 1 to 4 bytes left-justified into $t1, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:false,label:"lwr",labelDetails:{detail:" $t1,-100($t2)",description:"Load word right"},kind:3,documentation:"Load from 1 to 4 bytes right-justified into $t1, starting with effective memory byte address and continuing through the high-order byte of its word"},
  {isPseudo:false,label:"sw",labelDetails:{detail:" $t1,-100($t2)",description:"Store word"},kind:3,documentation:"Store contents of $t1 into effective memory wod address"},
  {isPseudo:false,label:"sc",labelDetails:{detail:" $t1,-100($t2)",description:"Store conditional"},kind:3,documentation:"Paired with Load Linked (ll) to perform atomic read-modify-write. Stores $t1 value into effective address, then sets $t1 to 1 for success. Always succeeds because MARS does not simulate multiple processors."},
  {isPseudo:false,label:"swl",labelDetails:{detail:" $t1,-100($t2)",description:"Store word left"},kind:3,documentation:"Store high-order 1 to 4 bytes of $t1 into memory, starting with effective byte address and continuing through the low-order byte of its word"},
  {isPseudo:false,label:"swr",labelDetails:{detail:" $t1,-100($t2)",description:"Store word right"},kind:3,documentation:"Store low-order 1 to 4 bytes of $t1 into memory, starting with high-order byte of word containing effective byte address and continuing through that byte address"},
  {isPseudo:false,label:"lui",labelDetails:{detail:" $t1,100",description:"Load upper immediate"},kind:3,documentation:"Set high-order 16 bits of $t1 to 16-bit immediate and low-order 16 bits to 0"},
  {isPseudo:false,label:"beq",labelDetails:{detail:" $t1,$t2,label",description:"Branch if equal"},kind:3,documentation:"Branch to statement at label's address if $t1 and $t2 are equal"},
  {isPseudo:false,label:"bne",labelDetails:{detail:" $t1,$t2,label",description:"Branch if not equal"},kind:3,documentation:"Branch to statement at label's address if $t1 and $t2 are not equal"},
  {isPseudo:false,label:"bgez",labelDetails:{detail:" $t1,label",description:"Branch if greater than or equal to zero"},kind:3,documentation:"Branch to statement at label's address if $t1 is greater than or equal to zero"},
  {isPseudo:false,label:"bgezal",labelDetails:{detail:" $t1,label",description:"Branch if greater then or equal to zero and link"},kind:3,documentation:"If $t1 is greater than or equal to zero, then set $ra to the Program Counter and branch to statement at label's address"},
  {isPseudo:false,label:"bgtz",labelDetails:{detail:" $t1,label",description:"Branch if greater than zero"},kind:3,documentation:"Branch to statement at label's address if $t1 is greater than zero"},
  {isPseudo:false,label:"blez",labelDetails:{detail:" $t1,label",description:"Branch if less than or equal to zero"},kind:3,documentation:"Branch to statement at label's address if $t1 is less than or equal to zero"},
  {isPseudo:false,label:"bltz",labelDetails:{detail:" $t1,label",description:"Branch if less than zero"},kind:3,documentation:"Branch to statement at label's address if $t1 is less than zero"},
  {isPseudo:false,label:"bltzal",labelDetails:{detail:" $t1,label",description:"Branch if less than zero and link"},kind:3,documentation:"If $t1 is less than or equal to zero, then set $ra to the Program Counter and branch to statement at label's address"},
  {isPseudo:false,label:"slt",labelDetails:{detail:" $t1,$t2,$t3",description:"Set less than"},kind:3,documentation:"If $t2 is less than $t3, then set $t1 to 1 else set $t1 to 0"},
  {isPseudo:false,label:"sltu",labelDetails:{detail:" $t1,$t2,$t3",description:"Set less than unsigned"},kind:3,documentation:"If $t2 is less than $t3 using unsigned comparision, then set $t1 to 1 else set $t1 to 0"},
  {isPseudo:false,label:"slti",labelDetails:{detail:" $t1,$t2,-100",description:"Set less than immediate"},kind:3,documentation:"If $t2 is less than sign-extended 16-bit immediate, then set $t1 to 1 else set $t1 to 0"},
  {isPseudo:false,label:"sltiu",labelDetails:{detail:" $t1,$t2,-100",description:"Set less than immediate unsigned"},kind:3,documentation:"If $t2 is less than sign-extended 16-bit immediate using unsigned comparison, then set $t1 to 1 else set $t1 to 0"},
  {isPseudo:false,label:"movn",labelDetails:{detail:" $t1,$t2,$t3",description:"Move conditional not zero"},kind:3,documentation:"Set $t1 to $t2 if $t3 is not zero"},
  {isPseudo:false,label:"movz",labelDetails:{detail:" $t1,$t2,$t3",description:"Move conditional zero"},kind:3,documentation:"Set $t1 to $t2 if $t3 is zero"},
  {isPseudo:false,label:"movf",labelDetails:{detail:" $t1,$t2",description:"Move if FP condition flag 0 false"},kind:3,documentation:"Set $t1 to $t2 if FPU (Coprocessor 1) condition flag 0 is false (zero)"},
  {isPseudo:false,label:"movf",labelDetails:{detail:" $t1,$t2,1",description:"Move if specified FP condition flag false"},kind:3,documentation:"Set $t1 to $t2 if FPU (Coprocessor 1) condition flag specified by the immediate is false (zero)"},
  {isPseudo:false,label:"movt",labelDetails:{detail:" $t1,$t2",description:"Move if FP condition flag 0 true"},kind:3,documentation:"Set $t1 to $t2 if FPU (Coprocessor 1) condition flag 0 is true (one)"},
  {isPseudo:false,label:"movt",labelDetails:{detail:" $t1,$t2,1",description:"Move if specfied FP condition flag true"},kind:3,documentation:"Set $t1 to $t2 if FPU (Coprocessor 1) condition flag specified by the immediate is true (one)"},
  {isPseudo:false,label:"break",labelDetails:{detail:" 100",description:"Break execution with code"},kind:14,documentation:"Terminate program execution with specified exception code"},
  {isPseudo:false,label:"break",labelDetails:{description:"Break execution"},kind:14,documentation:"Terminate program execution with exception"},
  {isPseudo:false,label:"syscall",labelDetails:{description:"Issue a system call"},kind:14,documentation:"Execute the system call specified by value in $v0"},
  {isPseudo:false,label:"j",labelDetails:{detail:" target",description:"Jump unconditionally"},kind:3,documentation:"Jump to statement at target address"},
  {isPseudo:false,label:"jr",labelDetails:{detail:" $t1",description:"Jump register unconditionally"},kind:3,documentation:"Jump to statement whose address is in $t1"},
  {isPseudo:false,label:"jal",labelDetails:{detail:" target",description:"Jump and link"},kind:3,documentation:"Set $ra to Program Counter (return address) then jump to statement at target address"},
  {isPseudo:false,label:"jalr",labelDetails:{detail:" $t1,$t2",description:"Jump and link register"},kind:3,documentation:"Set $t1 to Program Counter (return address) then jump to statement whose address is in $t2"},
  {isPseudo:false,label:"jalr",labelDetails:{detail:" $t1",description:"Jump and link register"},kind:3,documentation:"Set $ra to Program Counter (return address) then jump to statement whose address is in $t1"},
  {isPseudo:false,label:"lb",labelDetails:{detail:" $t1,-100($t2)",description:"Load byte"},kind:3,documentation:"Set $t1 to sign-extended 8-bit value from effective memory byte address"},
  {isPseudo:false,label:"lh",labelDetails:{detail:" $t1,-100($t2)",description:"Load halfword"},kind:3,documentation:"Set $t1 to sign-extended 16-bit value from effective memory halfword address"},
  {isPseudo:false,label:"lhu",labelDetails:{detail:" $t1,-100($t2)",description:"Load halfword unsigned"},kind:3,documentation:"Set $t1 to zero-extended 16-bit value from effective memory halfword address"},
  {isPseudo:false,label:"lbu",labelDetails:{detail:" $t1,-100($t2)",description:"Load byte unsigned"},kind:3,documentation:"Set $t1 to zero-extended 8-bit value from effective memory byte address"},
  {isPseudo:false,label:"sb",labelDetails:{detail:" $t1,-100($t2)",description:"Store byte"},kind:3,documentation:"Store the low-order 8 bits of $t1 into the effective memory byte address"},
  {isPseudo:false,label:"sh",labelDetails:{detail:" $t1,-100($t2)",description:"Store halfword"},kind:3,documentation:"Store the low-order 16 bits of $t1 into the effective memory halfword address"},
  {isPseudo:false,label:"clo",labelDetails:{detail:" $t1,$t2",description:"Count number of leading ones"},kind:3,documentation:"Set $t1 to the count of leading one bits in $t2 starting at most significant bit position"},
  {isPseudo:false,label:"clz",labelDetails:{detail:" $t1,$t2",description:"Count number of leading zeroes"},kind:3,documentation:"Set $t1 to the count of leading zero bits in $t2 starting at most significant bit positio"},
  {isPseudo:false,label:"mfc0",labelDetails:{detail:" $t1,$8",description:"Move from Coprocessor 0"},kind:3,documentation:"Set $t1 to the value stored in Coprocessor 0 register $8"},
  {isPseudo:false,label:"mtc0",labelDetails:{detail:" $t1,$8",description:"Move to Coprocessor 0"},kind:3,documentation:"Set Coprocessor 0 register $8 to value stored in $t1"},
  // Floating Point Instructions Start Here
  {isPseudo:false,label:"add.s",labelDetails:{detail:" $f0,$f1,$f3",description:"Floating point addition single precision"},kind:3,documentation:"Set $f0 to single-precision floating point value of $f1 plus $f3"},
  {isPseudo:false,label:"sub.s",labelDetails:{detail:" $f0,$f1,$f3",description:"Floating point subtraction single precision"},kind:3,documentation:"Set $f0 to single-precision floating point value of $f1 minus $f3"},
  {isPseudo:false,label:"mul.s",labelDetails:{detail:" $f0,$f1,$f3",description:"Floating point multiplication single precision"},kind:3,documentation:"Set $f0 to single-precision floating point value of $f1 times $f3"},
  {isPseudo:false,label:"div.s",labelDetails:{detail:" $f0,$f1,$f3",description:"Floating point division single precision"},kind:3,documentation:"Set $f0 to single-precision floating point value of $f1 divided by $f3"},
  {isPseudo:false,label:"sqrt.s",labelDetails:{detail:" $f0,$f1",description:"Square root single precision"},kind:3,documentation:"Set $f0 to single-precision floating point square root of $f1"},
  {isPseudo:false,label:"floor.w.s",labelDetails:{detail:" $f0,$f1",description:"Floor single precision to word"},kind:3,documentation:"Set $f0 to 32-bit integer floor of single-precision float in $f1"},
  {isPseudo:false,label:"ceil.w.s",labelDetails:{detail:" $f0,$f1",description:"Ceiling single precision to word"},kind:3,documentation:"Set $f0 to 32-bit integer ceiling of single-precision float in $f1"},
  {isPseudo:false,label:"round.w.s",labelDetails:{detail:" $f0,$f1",description:"Round single precision to word"},kind:3,documentation:"Set $f0 to 32-bit integer round of single-precision float in $f1"},
  {isPseudo:false,label:"trunc.w.s",labelDetails:{detail:" $f0,$f1",description:"Truncate single precision to word"},kind:3,documentation:"Set $f0 to 32-bit integer truncation of single-precision float in $f1"},
  {isPseudo:false,label:"add.d",labelDetails:{detail:" $f2,$f4,$f6",description:"Floating point addition double precision"},kind:3,documentation:"Set $f2 to double-precision floating point value of $f4 plus $f6"},
  {isPseudo:false,label:"sub.d",labelDetails:{detail:" $f2,$f4,$f6",description:"Floating point subtraction double precision"},kind:3,documentation:"Set $f2 to double-precision floating point value of $f4 minus $f6"},
  {isPseudo:false,label:"mul.d",labelDetails:{detail:" $f2,$f4,$f6",description:"Floating point multiplication double precision"},kind:3,documentation:"Set $f2 to double-precision floating point value of $f4 times $f6"},
  {isPseudo:false,label:"div.d",labelDetails:{detail:" $f2,$f4,$f6",description:"Floating point division double precision"},kind:3,documentation:"Set $f2 to double-precision floating point value of $f4 divided by $f6"},
  {isPseudo:false,label:"sqrt.d",labelDetails:{detail:" $f2,$f4",description:"Square root double precision"},kind:3,documentation:"Set $f2 to double-precision floating point square root of $f4"},
  {isPseudo:false,label:"floor.w.d",labelDetails:{detail:" $f1,$f2",description:"Floor double precision to word"},kind:3,documentation:"Set $f1 to 32-bit integer floor of double-precision float in $f2"},
  {isPseudo:false,label:"ceil.w.d",labelDetails:{detail:" $f1,$f2",description:"Ceiling double precision to word"},kind:3,documentation:"Set $f1 to 32-bit integer ceiling of double-precision float in $f2"},
  {isPseudo:false,label:"round.w.d",labelDetails:{detail:" $f1,$f2",description:"Round double precision to word"},kind:3,documentation:"Set $f1 to 32-bit integer round of double-precision float in $f2"},
  {isPseudo:false,label:"trunc.w.d",labelDetails:{detail:" $f1,$f2",description:"Truncate double precision to word"},kind:3,documentation:"Set $f1 to 32-bit integer truncation of double-precision float in $f2"},
  {isPseudo:false,label:"bc1t",labelDetails:{detail:" label",description:"Branch if FP condition flag 0 true (BC1T, not BCLT)"},kind:3,documentation:"If Coprocessor 1 condition flag 0 is true (one) then branch to statement at label's address"},
  {isPseudo:false,label:"bc1t",labelDetails:{detail:" 1,label",description:"Branch if specified FP condition flag true (BC1T, not BCLT)"},kind:3,documentation:"If Coprocessor 1 condition flag specified by immediate is true (one) then branch to statement at label's address"},
  {isPseudo:false,label:"bc1f",labelDetails:{detail:" label",description:"Branch if FP condition flag 0 false (BC1F, not BCLF)"},kind:3,documentation:"If Coprocessor 1 condition flag 0 is false (zero) then branch to statement at label's address"},
  {isPseudo:false,label:"bc1f",labelDetails:{detail:" 1,label",description:"Branch if specified FP condition flag false (BC1F, not BCLF)"},kind:3,documentation:"If Coprocessor 1 condition flag specified by immediate is false (zero) then branch to statement at label's address"},
  {isPseudo:false,label:"c.eq.s",labelDetails:{detail:" $f0,$f1",description:"Compare equal single precision"},kind:3,documentation:"If $f0 is equal to $f1, set Coprocessor 1 condition flag 0 true else set it false"},
  {isPseudo:false,label:"c.eq.s",labelDetails:{detail:" 1,$f0,$f1",description:"Compare equal single precision"},kind:3,documentation:"If $f0 is equal to $f1, set Coprocessor 1 condition flag specied by immediate to true else set it to false"},
  {isPseudo:false,label:"c.le.s",labelDetails:{detail:" $f0,$f1",description:"Compare less or equal single precision"},kind:3,documentation:"If $f0 is less than or equal to $f1, set Coprocessor 1 condition flag 0 true else set it false"},
  {isPseudo:false,label:"c.le.s",labelDetails:{detail:" 1,$f0,$f1",description:"Compare less or equal single precision"},kind:3,documentation:"If $f0 is less than or equal to $f1, set Coprocessor 1 condition flag specified by immediate to true else set it to false"},
  {isPseudo:false,label:"c.lt.s",labelDetails:{detail:" $f0,$f1",description:"Compare less than single precision"},kind:3,documentation:"If $f0 is less than $f1, set Coprocessor 1 condition flag 0 true else set it false"},
  {isPseudo:false,label:"c.lt.s",labelDetails:{detail:" 1,$f0,$f1",description:"Compare less than single precision"},kind:3,documentation:"If $f0 is less than $f1, set Coprocessor 1 condition flag specified by immediate to true else set it to false"},
  {isPseudo:false,label:"c.eq.d",labelDetails:{detail:" $f2,$f4",description:"Compare equal double precision"},kind:3,documentation:"If $f2 is equal to $f4 (double-precision), set Coprocessor 1 condition flag 0 true else set it false"},
  {isPseudo:false,label:"c.eq.d",labelDetails:{detail:" 1,$f2,$f4",description:"Compare equal double precision"},kind:3,documentation:"If $f2 is equal to $f4 (double-precision), set Coprocessor 1 condition flag specified by immediate to true else set it to false"},
  {isPseudo:false,label:"c.le.d",labelDetails:{detail:" $f2,$f4",description:"Compare less or equal double precision"},kind:3,documentation:"If $f2 is less than or equal to $f4 (double-precision), set Coprocessor 1 condition flag 0 true else set it false"},
  {isPseudo:false,label:"c.le.d",labelDetails:{detail:" 1,$f2,$f4",description:"Compare less or equal double precision"},kind:3,documentation:"If $f2 is less than or equal to $f4 (double-precision), set Coprocessor 1 condition flag specfied by immediate true else set it false"},
  {isPseudo:false,label:"c.lt.d",labelDetails:{detail:" $f2,$f4",description:"Compare less than double precision"},kind:3,documentation:"If $f2 is less than $f4 (double-precision), set Coprocessor 1 condition flag 0 true else set it false"},
  {isPseudo:false,label:"c.lt.d",labelDetails:{detail:" 1,$f2,$f4",description:"Compare less than double precision"},kind:3,documentation:"If $f2 is less than $f4 (double-precision), set Coprocessor 1 condition flag specified by immediate to true else set it to false"},
  {isPseudo:false,label:"abs.s",labelDetails:{detail:" $f0,$f1",description:"Floating point absolute value single precision"},kind:3,documentation:"Set $f0 to absolute value of $f1, single precision"},
  {isPseudo:false,label:"abs.d",labelDetails:{detail:" $f2,$f4",description:"Floating point absolute value double precision"},kind:3,documentation:"Set $f2 to absolute value of $f4, double precision"},
  {isPseudo:false,label:"cvt.d.s",labelDetails:{detail:" $f2,$f1",description:"Convert from single precision to double precision"},kind:3,documentation:"Set $f2 to double precision equivalent of single precision value in $f1"},
  {isPseudo:false,label:"cvt.d.w",labelDetails:{detail:" $f2,$f1",description:"Convert from word to double precision"},kind:3,documentation:"Set $f2 to double precision equivalent of 32-bit integer value in $f1"},
  {isPseudo:false,label:"cvt.s.d",labelDetails:{detail:" $f1,$f2",description:"Convert from double precision to single precision"},kind:3,documentation:"Set $f1 to single precision equivalent of double precision value in $f2"},
  {isPseudo:false,label:"cvt.s.w",labelDetails:{detail:" $f0,$f1",description:"Convert from word to single precision"},kind:3,documentation:"Set $f0 to single precision equivalent of 32-bit integer value in $f2"},
  {isPseudo:false,label:"cvt.w.d",labelDetails:{detail:" $f1,$f2",description:"Convert from double precision to word"},kind:3,documentation:"Set $f1 to 32-bit integer equivalent of double precision value in $f2"},
  {isPseudo:false,label:"cvt.w.s",labelDetails:{detail:" $f0,$f1",description:"Convert from single precision to word"},kind:3,documentation:"Set $f0 to 32-bit integer equivalent of single precision value in $f1"},
  {isPseudo:false,label:"mov.d",labelDetails:{detail:" $f2,$f4",description:"Move floating point double precision"},kind:3,documentation:"Set double precision $f2 to double precision value in $f4"},
  {isPseudo:false,label:"movf.d",labelDetails:{detail:" $f2,$f4",description:"Move floating point double precision"},kind:3,documentation:"If condition flag 0 false, set double precision $f2 to double precision value in $f4"},
  {isPseudo:false,label:"movf.d",labelDetails:{detail:" $f2,$f4,1",description:"Move floating point double precision"},kind:3,documentation:"If condition flag specified by immediate is false, set double precision $f2 to double precision value in $f4"},
  {isPseudo:false,label:"movt.d",labelDetails:{detail:" $f2,$f4",description:"Move floating point double precision"},kind:3,documentation:"If condition flag 0 true, set double precision $f2 to double precision value in $f4"},
  {isPseudo:false,label:"movt.d",labelDetails:{detail:" $f2,$f4,1",description:"Move floating point double precision"},kind:3,documentation:"If condition flag specified by immediate is true, set double precision $f2 to double precision value in $f4e"},
  {isPseudo:false,label:"movn.d",labelDetails:{detail:" $f2,$f4,$t3",description:"Move floating point double precision"},kind:3,documentation:"If $t3 is not zero, set double precision $f2 to double precision value in $f4"},
  {isPseudo:false,label:"movz.d",labelDetails:{detail:" $f2,$f4,$t3",description:"Move floating point double precision"},kind:3,documentation:"If $t3 is zero, set double precision $f2 to double precision value in $f4"},
  {isPseudo:false,label:"mov.s",labelDetails:{detail:" $f0,$f1",description:"Move floating point single precision"},kind:3,documentation:"Set single precision $f0 to single precision value in $f1"},
  {isPseudo:false,label:"movf.s",labelDetails:{detail:" $f0,$f1",description:"Move floating point single precision"},kind:3,documentation:"If condition flag 0 is false, set single precision $f0 to single precision value in $f1"},
  {isPseudo:false,label:"movf.s",labelDetails:{detail:" $f0,$f1,1",description:"Move floating point single precision"},kind:3,documentation:"If condition flag specified by immediate is false, set single precision $f0 to single precision value in $f1e"},
  {isPseudo:false,label:"movt.s",labelDetails:{detail:" $f0,$f1",description:"Move floating point single precision"},kind:3,documentation:"If condition flag 0 is true, set single precision $f0 to single precision value in $f1e"},
  {isPseudo:false,label:"movt.s",labelDetails:{detail:" $f0,$f1,1",description:"Move floating point single precision"},kind:3,documentation:"If condition flag specified by immediate is true, set single precision $f0 to single precision value in $f1e"},
  {isPseudo:false,label:"movn.s",labelDetails:{detail:" $f0,$f1,$t3",description:"Move floating point single precision"},kind:3,documentation:"If $t3 is not zero, set single precision $f0 to single precision value in $f1"},
  {isPseudo:false,label:"movz.s",labelDetails:{detail:" $f0,$f1,$t3",description:"Move floating point single precision"},kind:3,documentation:"If $t3 is zero, set single precision $f0 to single precision value in $f1"},
  {isPseudo:false,label:"mfc1",labelDetails:{detail:" $t1,$f1",description:"Move from Coprocessor 1 (FPU)"},kind:3,documentation:"Set $t1 to value in Coprocessor 1 register $f1"},
  {isPseudo:false,label:"mtc1",labelDetails:{detail:" $t1,$f1",description:"Move to Coprocessor 1 (FPU)"},kind:3,documentation:"Set Coprocessor 1 register $f1 to value in $t1"},
  {isPseudo:false,label:"neg.d",labelDetails:{detail:" $f2,$f4",description:"Floating point negate double precision"},kind:3,documentation:"Set double precision $f2 to negation of double precision value in $f4"},
  {isPseudo:false,label:"neg.s",labelDetails:{detail:" $f0,$f1",description:"Floating point negate single precision"},kind:3,documentation:"Set single precision $f0 to negation of single precision value in $f1"},
  {isPseudo:false,label:"lwc1",labelDetails:{detail:" $f1,-100($t2)",description:"Load word into Coprocessor 1 (FPU)"},kind:3,documentation:"Set $f1 to 32-bit value from effective memory word address"},
  {isPseudo:false,label:"ldc1",labelDetails:{detail:" $f2,-100($t2)",description:"Load double word Coprocessor 1 (FPU))"},kind:3,documentation:"Set $f2 to 64-bit value from effective memory doubleword address"},
  {isPseudo:false,label:"swc1",labelDetails:{detail:" $f1,-100($t2)",description:"Store word from Coprocesor 1 (FPU)"},kind:3,documentation:"Store 32 bit value in $f1 to effective memory word address"},
  {isPseudo:false,label:"sdc1",labelDetails:{detail:" $f2,-100($t2)",description:"Store double word from Coprocessor 1 (FPU))"},kind:3,documentation:"Store 64 bit value in $f2 to effective memory doubleword address"},
  // THE TRAP INSTRUCTIONS & ERET
  {isPseudo:false,label:"teq",labelDetails:{detail:" $t1,$t2",description:"Trap if equal"},kind:3,documentation:"Trap if $t1 is equal to $t2"},
  {isPseudo:false,label:"teqi",labelDetails:{detail:" $t1,-100",description:"Trap if equal to immediate"},kind:3,documentation:"Trap if $t1 is equal to sign-extended 16 bit immediate"},
  {isPseudo:false,label:"tne",labelDetails:{detail:" $t1,$t2",description:"Trap if not equal"},kind:3,documentation:"Trap if $t1 is not equal to $t2"},
  {isPseudo:false,label:"tnei",labelDetails:{detail:" $t1,-100",description:"Trap if not equal to immediate"},kind:3,documentation:"Trap if $t1 is not equal to sign-extended 16 bit immediate"},
  {isPseudo:false,label:"tge",labelDetails:{detail:" $t1,$t2",description:"Trap if greater or equal"},kind:3,documentation:"Trap if $t1 is greater than or equal to $t2"},
  {isPseudo:false,label:"tgeu",labelDetails:{detail:" $t1,$t2",description:"Trap if greater or equal unsigned"},kind:3,documentation:"Trap if $t1 is greater than or equal to $t2 using unsigned comparision"},
  {isPseudo:false,label:"tgei",labelDetails:{detail:" $t1,-100",description:"Trap if greater than or equal to immediate"},kind:3,documentation:"Trap if $t1 greater than or equal to sign-extended 16 bit immediate"},
  {isPseudo:false,label:"tgeiu",labelDetails:{detail:" $t1,-100",description:"Trap if greater or equal to immediate unsigned"},kind:3,documentation:"Trap if $t1 greater than or equal to sign-extended 16 bit immediate, unsigned comparison"},
  {isPseudo:false,label:"tlt",labelDetails:{detail:" $t1,$t2",description:"Trap if less than"},kind:3,documentation:" Trap if $t1 less than $t2"},
  {isPseudo:false,label:"tltu",labelDetails:{detail:" $t1,$t2",description:"Trap if less than unsigned"},kind:3,documentation:"Trap if $t1 less than $t2, unsigned comparison"},
  {isPseudo:false,label:"tlti",labelDetails:{detail:" $t1,-100",description:"Trap if less than immediate"},kind:3,documentation:"Trap if $t1 less than sign-extended 16-bit immediate"},
  {isPseudo:false,label:"tltiu",labelDetails:{detail:" $t1,-100",description:"Trap if less than immediate unsigned"},kind:3,documentation:"Trap if $t1 less than sign-extended 16-bit immediate, unsigned comparison"},
  {isPseudo:false,label:"eret",labelDetails:{description:"Exception return"},kind:14,documentation:"Set Program Counter to Coprocessor 0 EPC register value, set Coprocessor Status register bit 1 (exception level) to zero"},
  // Arithmetic and branch pseudo-ops
  {isPseudo:true,label:"not",labelDetails:{detail:" $t1,$t2",description:"Bitwise NOT (bit inversion)"},kind:14},
  
  // Arithmetic ops
  {isPseudo:true,label:"add",labelDetails:{detail:" $t1,$t2,-100",description:"ADDition"},kind:14,documentation:"set $t1 to ($t2 plus 16-bit immediate)"},
  {isPseudo:true,label:"add",labelDetails:{detail:" $t1,$t2,100000",description:"ADDition"},kind:14,documentation:"set $t1 to ($t2 plus 32-bit immediate)"},
  {isPseudo:true,label:"addu",labelDetails:{detail:" $t1,$t2,100000",description:"ADDition Unsigned"},kind:14,documentation:"set $t1 to ($t2 plus 32-bit immediate), no overflow"},
  {isPseudo:true,label:"addi",labelDetails:{detail:" $t1,$t2,100000",description:"ADDition Immediate"},kind:14,documentation:"set $t1 to ($t2 plus 32-bit immediate)"},
  {isPseudo:true,label:"addiu",labelDetails:{detail:" $t1,$t2,100000",description:"ADDition Immediate Unsigned"},kind:14,documentation:"set $t1 to ($t2 plus 32-bit immediate), no overflow"},
  {isPseudo:true,label:"sub",labelDetails:{detail:" $t1,$t2,-100",description:"SUBtraction"},kind:14,documentation:"set $t1 to ($t2 minus 16-bit immediate)"},
  {isPseudo:true,label:"sub",labelDetails:{detail:" $t1,$t2,100000",description:"SUBtraction"},kind:14,documentation:"set $t1 to ($t2 minus 32-bit immediate)"},
  {isPseudo:true,label:"subu",labelDetails:{detail:" $t1,$t2,100000",description:"SUBtraction Unsigned"},kind:14,documentation:"set $t1 to ($t2 minus 32-bit immediate), no overflow"},
  {isPseudo:true,label:"subi",labelDetails:{detail:" $t1,$t2,-100",description:"SUBtraction Immediate"},kind:14,documentation:"set $t1 to ($t2 minus 16-bit immediate)"},
  {isPseudo:true,label:"subi",labelDetails:{detail:" $t1,$t2,100000",description:"SUBtraction Immediate"},kind:14,documentation:"set $t1 to ($t2 minus 32-bit immediate)"},
  {isPseudo:true,label:"subiu",labelDetails:{detail:" $t1,$t2,100000",description:"SUBtraction Immediate Unsigned"},kind:14,documentation:"set $t1 to ($t2 minus 32-bit immediate), no overflow"},
  
  // Logical operations
  {isPseudo:true,label:"andi",labelDetails:{detail:" $t1,$t2,100000",description:"AND Immediate"},kind:14,documentation:"set $t1 to ($t2 bitwise-AND 32-bit immediate)"},
  {isPseudo:true,label:"ori",labelDetails:{detail:" $t1,$t2,100000",description:"OR Immediate"},kind:14,documentation:"set $t1 to ($t2 bitwise-OR 32-bit immediate)"},
  {isPseudo:true,label:"xori",labelDetails:{detail:" $t1,$t2,100000",description:"XOR Immediate"},kind:14,documentation:"set $t1 to ($t2 bitwise-exclusive-OR 32-bit immediate)"},
  {isPseudo:true,label:"and",labelDetails:{detail:" $t1,$t2,100",description:"AND"},kind:14,documentation:"set $t1 to ($t2 bitwise-AND 16-bit unsigned immediate)"},
  {isPseudo:true,label:"or",labelDetails:{detail:" $t1,$t2,100",description:"OR"},kind:14,documentation:"set $t1 to ($t2 bitwise-OR 16-bit unsigned immediate)"},
  {isPseudo:true,label:"xor",labelDetails:{detail:" $t1,$t2,100",description:"XOR"},kind:14,documentation:"set $t1 to ($t2 bitwise-exclusive-OR 16-bit unsigned immediate)"},
  {isPseudo:true,label:"and",labelDetails:{detail:" $t1,100",description:"AND"},kind:14,documentation:"set $t1 to ($t1 bitwise-AND 16-bit unsigned immediate)"},
  {isPseudo:true,label:"or",labelDetails:{detail:" $t1,100",description:"OR"},kind:14,documentation:"set $t1 to ($t1 bitwise-OR 16-bit unsigned immediate)"},
  {isPseudo:true,label:"xor",labelDetails:{detail:" $t1,100",description:"XOR"},kind:14,documentation:"set $t1 to ($t1 bitwise-exclusive-OR 16-bit unsigned immediate)"},
  {isPseudo:true,label:"andi",labelDetails:{detail:" $t1,100",description:"AND Immediate"},kind:14,documentation:"set $t1 to ($t1 bitwise-AND 16-bit unsigned immediate)"},
  {isPseudo:true,label:"ori",labelDetails:{detail:" $t1,100",description:"OR Immediate"},kind:14,documentation:"set $t1 to ($t1 bitwise-OR 16-bit unsigned immediate)"},
  {isPseudo:true,label:"xori",labelDetails:{detail:" $t1,100",description:"XOR Immediate"},kind:14,documentation:"set $t1 to ($t1 bitwise-exclusive-OR 16-bit unsigned immediate)"},
  {isPseudo:true,label:"andi",labelDetails:{detail:" $t1,100000",description:"AND Immediate"},kind:14,documentation:"set $t1 to ($t1 bitwise-AND 32-bit immediate)"},
  {isPseudo:true,label:"ori",labelDetails:{detail:" $t1,100000",description:"OR Immediate"},kind:14,documentation:"set $t1 to ($t1 bitwise-OR 32-bit immediate)"},
  {isPseudo:true,label:"xori",labelDetails:{detail:" $t1,100000",description:"XOR Immediate"},kind:14,documentation:"set $t1 to ($t1 bitwise-exclusive-OR 32-bit immediate)"},

  {isPseudo:true,label:"seq",labelDetails:{detail:" $t1,$t2,$t3",description:"Set EQual"},kind:14,documentation:"if $t2 equal to $t3 then set $t1 to 1 else 0"},
  {isPseudo:true,label:"seq",labelDetails:{detail:" $t1,$t2,-100",description:"Set EQual"},kind:14,documentation:"if $t2 equal to 16-bit immediate then set $t1 to 1 else 0"},
  {isPseudo:true,label:"seq",labelDetails:{detail:" $t1,$t2,100000",description:"Set EQual"},kind:14,documentation:"if $t2 equal to 32-bit immediate then set $t1 to 1 else 0"},

  {isPseudo:true,label:"sne",labelDetails:{detail:" $t1,$t2,$t3",description:"Set Not Equal"},kind:14,documentation:"if $t2 not equal to $t3 then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sne",labelDetails:{detail:" $t1,$t2,-100",description:"Set Not Equal"},kind:14,documentation:"if $t2 not equal to 16-bit immediate then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sne",labelDetails:{detail:" $t1,$t2,100000",description:"Set Not Equal"},kind:14,documentation:"if $t2 not equal to 32-bit immediate then set $t1 to 1 else 0"},

  {isPseudo:true,label:"sge",labelDetails:{detail:" $t1,$t2,$t3",description:"Set Greater or Equal"},kind:14,documentation:"if $t2 greater or equal to $t3 then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sge",labelDetails:{detail:" $t1,$t2,-100",description:"Set Greater or Equal"},kind:14,documentation:"if $t2 greater or equal to 16-bit immediate then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sge",labelDetails:{detail:" $t1,$t2,100000",description:"Set Greater or Equal"},kind:14,documentation:"if $t2 greater or equal to 32-bit immediate then set $t1 to 1 else 0"},

  {isPseudo:true,label:"sgeu",labelDetails:{detail:" $t1,$t2,$t3",description:"Set Greater or Equal Unsigned"},kind:14,documentation:"if $t2 greater or equal to $t3 (unsigned compare) then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sgeu",labelDetails:{detail:" $t1,$t2,-100",description:"Set Greater or Equal Unsigned"},kind:14,documentation:"if $t2 greater or equal to 16-bit immediate (unsigned compare) then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sgeu",labelDetails:{detail:" $t1,$t2,100000",description:"Set Greater or Equal Unsigned"},kind:14,documentation:"if $t2 greater or equal to 32-bit immediate (unsigned compare) then set $t1 to 1 else 0"},

  {isPseudo:true,label:"sgt",labelDetails:{detail:" $t1,$t2,$t3",description:"Set Greater Than"},kind:14,documentation:"if $t2 greater than $t3 then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sgt",labelDetails:{detail:" $t1,$t2,-100",description:"Set Greater Than"},kind:14,documentation:"if $t2 greater than 16-bit immediate then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sgt",labelDetails:{detail:" $t1,$t2,100000",description:"Set Greater Than"},kind:14,documentation:"if $t2 greater than 32-bit immediate then set $t1 to 1 else 0"},

  {isPseudo:true,label:"sgtu",labelDetails:{detail:" $t1,$t2,$t3",description:"Set Greater Than Unsigned"},kind:14,documentation:"if $t2 greater than $t3 (unsigned compare) then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sgtu",labelDetails:{detail:" $t1,$t2,-100",description:"Set Greater Than Unsigned"},kind:14,documentation:"if $t2 greater than 16-bit immediate (unsigned compare) then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sgtu",labelDetails:{detail:" $t1,$t2,100000",description:"Set Greater Than Unsigned"},kind:14,documentation:"if $t2 greater than 32-bit immediate (unsigned compare) then set $t1 to 1 else 0"},

  {isPseudo:true,label:"sle",labelDetails:{detail:" $t1,$t2,$t3",description:"Set Less or Equal"},kind:14,documentation:"if $t2 less or equal to $t3 then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sle",labelDetails:{detail:" $t1,$t2,-100",description:"Set Less or Equal"},kind:14,documentation:"if $t2 less or equal to 16-bit immediate then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sle",labelDetails:{detail:" $t1,$t2,100000",description:"Set Less or Equal"},kind:14,documentation:"if $t2 less or equal to 32-bit immediate then set $t1 to 1 else 0"},

  {isPseudo:true,label:"sleu",labelDetails:{detail:" $t1,$t2,$t3",description:"Set Less or Equal Unsigned"},kind:14,documentation:"if $t2 less or equal to $t3 (unsigned compare) then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sleu",labelDetails:{detail:" $t1,$t2,-100",description:"Set Less or Equal Unsigned"},kind:14,documentation:"if $t2 less or equal to 16-bit immediate (unsigned compare) then set $t1 to 1 else 0"},
  {isPseudo:true,label:"sleu",labelDetails:{detail:" $t1,$t2,100000",description:"Set Less or Equal Unsigned"},kind:14,documentation:"if $t2 less or equal to 32-bit immediate (unsigned compare) then set $t1 to 1 else 0"},


  {isPseudo:true,label:"move",labelDetails:{detail:" $t1,$t2",description:"MOVE"},kind:14,documentation:"Set $t1 to contents of $t2"},
  {isPseudo:true,label:"abs",labelDetails:{detail:" $t1,$t2",description:"ABSolute value"},kind:14,documentation:"Set $t1 to absolute value of $t2 (algorithm from Hacker's Delight) "},
  {isPseudo:true,label:"neg",labelDetails:{detail:" $t1,$t2",description:"NEGate"},kind:14,documentation:"Set $t1 to negation of $t2"},
  {isPseudo:true,label:"negu",labelDetails:{detail:" $t1,$t2",description:"NEGate Unsigned"},kind:14,documentation:"Set $t1 to negation of $t2, no overflow"},

  {isPseudo:true,label:"b",labelDetails:{detail:" label",description:"Branch"},kind:14,documentation:"Branch to statement at label unconditionally"},
  {isPseudo:true,label:"beqz",labelDetails:{detail:" $t1,label",description:"Branch if EQual Zero"},kind:14,documentation:"Branch to statement at label if $t1 is equal to zero"},
  {isPseudo:true,label:"bnez",labelDetails:{detail:" $t1,label",description:"Branch if Not Equal Zero"},kind:14,documentation:"Branch to statement at label if $t1 is not equal to zero"},

  {isPseudo:true,label:"beq",labelDetails:{detail:" $t1,-100,label",description:"Branch if EQual"},kind:14,documentation:"Branch to statement at label if $t1 is equal to 16-bit immediate"},
  {isPseudo:true,label:"beq",labelDetails:{detail:" $t1,100000,label",description:"Branch if EQual"},kind:14,documentation:"Branch to statement at label if $t1 is equal to 32-bit immediate|"},
  {isPseudo:true,label:"bne",labelDetails:{detail:" $t1,-100,label",description:"Branch if Not Equal"},kind:14,documentation:"Branch to statement at label if $t1 is not equal to 16-bit immediate"},
  {isPseudo:true,label:"bne",labelDetails:{detail:" $t1,100000,label",description:"Branch if Not Equal"},kind:14,documentation:"Branch to statement at label if $t1 is not equal to 32-bit immediate|"},

  {isPseudo:true,label:"bge",labelDetails:{detail:" $t1,$t2,label",description:"Branch if Greater or Equal"},kind:14,documentation:"Branch to statement at label if $t1 is greater or equal to $t2"},
  {isPseudo:true,label:"bge",labelDetails:{detail:" $t1,-100,label",description:"Branch if Greater or Equal"},kind:14,documentation:"Branch to statement at label if $t1 is greater or equal to 16-bit immediate|"},
  {isPseudo:true,label:"bge",labelDetails:{detail:" $t1,100000,label",description:"Branch if Greater or Equal"},kind:14,documentation:"Branch to statement at label if $t1 is greater or equal to 32-bit immediate|"},

  {isPseudo:true,label:"bgeu",labelDetails:{detail:" $t1,$t2,label",description:"Branch if Greater or Equal Unsigned"},kind:14,documentation:"Branch to statement at label if $t1 is greater or equal to $t2 (unsigned compare)"},
  {isPseudo:true,label:"bgeu",labelDetails:{detail:" $t1,-100,label",description:"Branch if Greater or Equal Unsigned"},kind:14,documentation:"Branch to statement at label if $t1 is greater or equal to 16-bit immediate (unsigned compare)"},
  {isPseudo:true,label:"bgeu",labelDetails:{detail:" $t1,100000,label",description:"Branch if Greater or Equal Unsigned"},kind:14,documentation:"Branch to statement at label if $t1 is greater or equal to 32-bit immediate (unsigned compare)"},

  {isPseudo:true,label:"bgt",labelDetails:{detail:" $t1,$t2,label",description:"Branch if Greater Than"},kind:14,documentation:"Branch to statement at label if $t1 is greater than $t2"},
  {isPseudo:true,label:"bgt",labelDetails:{detail:" $t1,-100,label",description:"Branch if Greater Than"},kind:14,documentation:"Branch to statement at label if $t1 is greater than 16-bit immediate|"},
  {isPseudo:true,label:"bgt",labelDetails:{detail:" $t1,100000,label",description:"Branch if Greater Than"},kind:14,documentation:"Branch to statement at label if $t1 is greater than 32-bit immediate"},

  {isPseudo:true,label:"bgtu",labelDetails:{detail:" $t1,$t2,label",description:"Branch if Greater Than Unsigned"},kind:14,documentation:"Branch to statement at label if $t1 is greater than $t2 (unsigned compare)"},
  {isPseudo:true,label:"bgtu",labelDetails:{detail:" $t1,-100,label",description:"Branch if Greater Than Unsigned"},kind:14,documentation:"Branch to statement at label if $t1 is greater than 16-bit immediate (unsigned compare)"},
  {isPseudo:true,label:"bgtu",labelDetails:{detail:" $t1,100000,label",description:"Branch if Greater Than Unsigned"},kind:14,documentation:"Branch to statement at label if $t1 is greater than 16-bit immediate (unsigned compare)"},

  {isPseudo:true,label:"ble",labelDetails:{detail:" $t1,$t2,label",description:"Branch if Less or Equal"},kind:14,documentation:"Branch to statement at label if $t1 is less than or equal to $t2"},
  {isPseudo:true,label:"ble",labelDetails:{detail:" $t1,-100,label",description:"Branch if Less or Equal"},kind:14,documentation:"Branch to statement at label if $t1 is less than or equal to 16-bit immediate"},
  {isPseudo:true,label:"ble",labelDetails:{detail:" $t1,100000,label",description:"Branch if Less or Equal"},kind:14,documentation:"Branch to statement at label if $t1 is less than or equal to 32-bit immediate|"},

  {isPseudo:true,label:"bleu",labelDetails:{detail:" $t1,$t2,label",description:"Branch if Less or Equal Unsigned"},kind:14,documentation:"Branch to statement at label if $t1 is less than or equal to $t2 (unsigned compare)"},
  {isPseudo:true,label:"bleu",labelDetails:{detail:" $t1,-100,label",description:"Branch if Less or Equal Unsigned"},kind:14,documentation:"Branch to statement at label if $t1 is less than or equal to 16-bit immediate (unsigned compare)"},
  {isPseudo:true,label:"bleu",labelDetails:{detail:" $t1,100000,label",description:"Branch if Less or Equal Unsigned"},kind:14,documentation:"Branch to statement at label if $t1 is less than or equal to 32-bit immediate (unsigned compare)"},

  {isPseudo:true,label:"blt",labelDetails:{detail:" $t1,$t2,label",description:"Branch if Less Than"},kind:14,documentation:"Branch to statement at label if $t1 is less than $t2"},
  {isPseudo:true,label:"blt",labelDetails:{detail:" $t1,-100,label",description:"Branch if Less Than"},kind:14,documentation:"Branch to statement at label if $t1 is less than 16-bit immediate"},
  {isPseudo:true,label:"blt",labelDetails:{detail:" $t1,100000,label",description:"Branch if Less Than"},kind:14,documentation:"Branch to statement at label if $t1 is less than 32-bit immediate"},

  {isPseudo:true,label:"bltu",labelDetails:{detail:" $t1,$t2,label",description:"Branch if Less Than Unsigned"},kind:14,documentation:"Branch to statement at label if $t1 is less than $t2"},
  {isPseudo:true,label:"bltu",labelDetails:{detail:" $t1,-100,label",description:"Branch if Less Than Unsigned"},kind:14,documentation:"Branch to statement at label if $t1 is less than 16-bit immediate|"},
  {isPseudo:true,label:"bltu",labelDetails:{detail:" $t1,100000,label",description:"Branch if Less Than Unsigned"},kind:14,documentation:"Branch to statement at label if $t1 is less than 32-bit immediate"},

  {isPseudo:true,label:"rol",labelDetails:{detail:" $t1,$t2,$t3",description:"ROtate Left"},kind:14,documentation:"Set $t1 to ($t2 rotated left by number of bit positions specified in $t3)"},
  {isPseudo:true,label:"rol",labelDetails:{detail:" $t1,$t2,10",description:"ROtate Left"},kind:14,documentation:"Set $t1 to ($t2 rotated left by number of bit positions specified in 5-bit immediate)"},
  {isPseudo:true,label:"ror",labelDetails:{detail:" $t1,$t2,$t3",description:"ROtate Right"},kind:14,documentation:"Set $t1 to ($t2 rotated right by number of bit positions specified in $t3)"},
  {isPseudo:true,label:"ror",labelDetails:{detail:" $t1,$t2,10",description:"ROtate Right"},kind:14,documentation:"Set $t1 to ($t2 rotated right by number of bit positions specified in 5-bit immediate)"},

  {isPseudo:true,label:"mfc1.d",labelDetails:{detail:" $t1,$f2",description:"Move From Coprocessor 1 Double"},kind:14,documentation:"Set $t1 to contents of $f2, set next higher register from $t1 to contents of next higher register from $f2"},
  {isPseudo:true,label:"mtc1.d",labelDetails:{detail:" $t1,$f2",description:"Move To Coprocessor 1 Double"},kind:14,documentation:"Set $f2 to contents of $t1, set next higher register from $f2 to contents of next higher register from $t1"},

  {isPseudo:true,label:"mul",labelDetails:{detail:" $t1,$t2,-100",description:"MULtiplication"},kind:14,documentation:"Set HI to high-order 32 bits, LO and $t1 to low-order 32 bits of the product of $t2 and 16-bit signed immediate (use mfhi to access HI, mflo to access LO)"},
  {isPseudo:true,label:"mul",labelDetails:{detail:" $t1,$t2,100000",description:"MULtiplication"},kind:14,documentation:"Set HI to high-order 32 bits, LO and $t1 to low-order 32 bits of the product of $t2 and 32-bit immediate (use mfhi to access HI, mflo to access LO)"},
  {isPseudo:true,label:"mulu",labelDetails:{detail:" $t1,$t2,$t3",description:"MULtiplication Unsigned"},kind:14,documentation:"Set HI to high-order 32 bits, LO and $t1 to low-order 32 bits of ($t2 multiplied by $t3, unsigned multiplication)"},
  {isPseudo:true,label:"mulu",labelDetails:{detail:" $t1,$t2,-100",description:"MULtiplication Unsigned"},kind:14,documentation:" Set HI to high-order 32 bits, LO and $t1 to low-order 32 bits of ($t2 multiplied by 16-bit immediate, unsigned multiplication)"},
  {isPseudo:true,label:"mulu",labelDetails:{detail:" $t1,$t2,100000",description:"MULtiplication Unsigned"},kind:14,documentation:" Set HI to high-order 32 bits, LO and $t1 to low-order 32 bits of ($t2 multiplied by 32-bit immediate, unsigned multiplication)"},
  {isPseudo:true,label:"mulo",labelDetails:{detail:" $t1,$t2,$t3",description:"MULtiplication with Overflow"},kind:14,documentation:"Set $t1 to low-order 32 bits of the product of $t2 and $t3"},
  {isPseudo:true,label:"mulo",labelDetails:{detail:" $t1,$t2,-100",description:"MULtiplication with Overflow"},kind:14,documentation:"Set $t1 to low-order 32 bits of the product of $t2 and signed 16-bit immediate"},
  {isPseudo:true,label:"mulo",labelDetails:{detail:" $t1,$t2,100000",description:"MULtiplication with Overflow"},kind:14,documentation:"Set $t1 to low-order 32 bits of the product of $t2 and 32-bit immediate"},
  {isPseudo:true,label:"mulou",labelDetails:{detail:" $t1,$t2,$t3",description:"MULtiplication with Overflow Unsigned"},kind:14,documentation:"Set $t1 to low-order 32 bits of the product of $t2 and $t3"},
  {isPseudo:true,label:"mulou",labelDetails:{detail:" $t1,$t2,-100",description:"MULtiplication with Overflow Unsigned"},kind:14,documentation:"Set $t1 to low-order 32 bits of the product of $t2 and signed 16-bit immediate"},
  {isPseudo:true,label:"mulou",labelDetails:{detail:" $t1,$t2,100000",description:"MULtiplication with Overflow Unsigned"},kind:14,documentation:"Set $t1 to low-order 32 bits of the product of $t2 and 32-bit immediate"},
  {isPseudo:true,label:"div",labelDetails:{detail:" $t1,$t2,$t3",description:"DIVision"},kind:14,documentation:"Set $t1 to ($t2 divided by $t3, integer division)"},
  {isPseudo:true,label:"div",labelDetails:{detail:" $t1,$t2,-100",description:"DIVision"},kind:14,documentation:"Set $t1 to ($t2 divided by 16-bit immediate, integer division)"},
  {isPseudo:true,label:"div",labelDetails:{detail:" $t1,$t2,100000",description:"DIVision"},kind:14,documentation:"Set $t1 to ($t2 divided by 32-bit immediate, integer division)"},
  {isPseudo:true,label:"divu",labelDetails:{detail:" $t1,$t2,$t3",description:"DIVision Unsigned"},kind:14,documentation:" Set $t1 to ($t2 divided by $t3, unsigned integer division)"},
  {isPseudo:true,label:"divu",labelDetails:{detail:" $t1,$t2,-100",description:"DIVision Unsigned"},kind:14,documentation:" Set $t1 to ($t2 divided by 16-bit immediate, unsigned integer division)"},
  {isPseudo:true,label:"divu",labelDetails:{detail:" $t1,$t2,100000",description:"DIVision Unsigned"},kind:14,documentation:" Set $t1 to ($t2 divided by 32-bit immediate, unsigned integer division)"},
  {isPseudo:true,label:"rem",labelDetails:{detail:" $t1,$t2,$t3",description:"REMainder"},kind:14,documentation:"Set $t1 to (remainder of $t2 divided by $t3)"},
  {isPseudo:true,label:"rem",labelDetails:{detail:" $t1,$t2,-100",description:"REMainder"},kind:14,documentation:"Set $t1 to (remainder of $t2 divided by 16-bit immediate)"},
  {isPseudo:true,label:"rem",labelDetails:{detail:" $t1,$t2,100000",description:"REMainder"},kind:14,documentation:"Set $t1 to (remainder of $t2 divided by 32-bit immediate)"},
  {isPseudo:true,label:"remu",labelDetails:{detail:" $t1,$t2,$t3",description:"REMainder"},kind:14,documentation:"Set $t1 to (remainder of $t2 divided by $t3, unsigned division)"},
  {isPseudo:true,label:"remu",labelDetails:{detail:" $t1,$t2,-100",description:"REMainder"},kind:14,documentation:"Set $t1 to (remainder of $t2 divided by 16-bit immediate, unsigned division)"},
  {isPseudo:true,label:"remu",labelDetails:{detail:" $t1,$t2,100000",description:"REMainder"},kind:14,documentation:"Set $t1 to (remainder of $t2 divided by 32-bit immediate, unsigned division)"},
  
  // Load/Store pseudo-ops
  {isPseudo:true,label:"li",labelDetails:{detail:" $t1,-100",description:"Load Immediate"},kind:14,documentation:"Set $t1 to 16-bit immediate (sign-extended)"},
  {isPseudo:true,label:"li",labelDetails:{detail:" $t1,100",description:"Load Immediate"},kind:14,documentation:"Set $t1 to unsigned 16-bit immediate (zero-extended)"},
  {isPseudo:true,label:"li",labelDetails:{detail:" $t1,100000",description:"Load Immediate"},kind:14,documentation:"Set $t1 to 32-bit immediate"},

  {isPseudo:true,label:"la",labelDetails:{detail:" $t1,($t2)",description:"Load Address"},kind:14,documentation:"Set $t1 to contents of $t2"},
  {isPseudo:true,label:"la",labelDetails:{detail:" $t1,-100",description:"Load Address"},kind:14,documentation:"Set $t1 to 16-bit immediate (sign-extended) "},
  {isPseudo:true,label:"la",labelDetails:{detail:" $t1,100",description:"Load Address"},kind:14,documentation:"Set $t1 to 16-bit immediate (zero-extended) "},
  {isPseudo:true,label:"la",labelDetails:{detail:" $t1,100000",description:"Load Address"},kind:14,documentation:"Set $t1 to 32-bit immediate"},
  {isPseudo:true,label:"la",labelDetails:{detail:" $t1,100($t2)",description:"Load Address"},kind:14,documentation:"Set $t1 to sum (of $t2 and 16-bit immediate)"},
  {isPseudo:true,label:"la",labelDetails:{detail:" $t1,100000($t2)",description:"Load Address"},kind:14,documentation:"Set $t1 to sum (of $t2 and 32-bit immediate)"},
  {isPseudo:true,label:"la",labelDetails:{detail:" $t1,label",description:"Load Address"},kind:14,documentation:"Set $t1 to label's address"},
  {isPseudo:true,label:"la",labelDetails:{detail:" $t1,label($t2)",description:"Load Address"},kind:14,documentation:"Set $t1 to sum (of $t2 and label's address)"},
  {isPseudo:true,label:"la",labelDetails:{detail:" $t1,label+100000",description:"Load Address"},kind:14,documentation:"Set $t1 to sum (of label's address and 32-bit immediate)"},
  {isPseudo:true,label:"la",labelDetails:{detail:" $t1,label+100000($t2)",description:"Load Address"},kind:14,documentation:"Set $t1 to sum (of label's address, 32-bit immediate, and $t2)"},

  {isPseudo:true,label:"lw",labelDetails:{detail:" $t1,($t2)",description:"Load Word"},kind:14,documentation:"Set $t1 to contents of effective memory word address"},
  {isPseudo:true,label:"lw",labelDetails:{detail:" $t1,-100",description:"Load Word"},kind:14,documentation:"Set $t1 to contents of effective memory word address"},
  {isPseudo:true,label:"lw",labelDetails:{detail:" $t1,100",description:"Load Word"},kind:14,documentation:"Set $t1 to contents of effective memory word address"},
  {isPseudo:true,label:"lw",labelDetails:{detail:" $t1,100000",description:"Load Word"},kind:14,documentation:"Set $t1 to contents of effective memory word address"},
  {isPseudo:true,label:"lw",labelDetails:{detail:" $t1,100($t2)",description:"Load Word"},kind:14,documentation:"Set $t1 to contents of effective memory word address"},
  {isPseudo:true,label:"lw",labelDetails:{detail:" $t1,100000($t2)",description:"Load Word"},kind:14,documentation:"Set $t1 to contents of effective memory word address"},
  {isPseudo:true,label:"lw",labelDetails:{detail:" $t1,label",description:"Load Word"},kind:14,documentation:"Set $t1 to contents of memory word at label's address"},
  {isPseudo:true,label:"lw",labelDetails:{detail:" $t1,label($t2)",description:"Load Word"},kind:14,documentation:"Set $t1 to contents of effective memory word address"},
  {isPseudo:true,label:"lw",labelDetails:{detail:" $t1,label+100000",description:"Load Word"},kind:14,documentation:"Set $t1 to contents of effective memory word address "},
  {isPseudo:true,label:"lw",labelDetails:{detail:" $t1,label+100000($t2)",description:"Load Word"},kind:14,documentation:"Set $t1 to contents of effective memory word address"},

  {isPseudo:true,label:"sw",labelDetails:{detail:" $t1,($t2)",description:"Store Word"},kind:14,documentation:"Store $t1 contents into effective memory word address"},
  {isPseudo:true,label:"sw",labelDetails:{detail:" $t1,-100",description:"Store Word"},kind:14,documentation:"Store $t1 contents into effective memory word address"},
  {isPseudo:true,label:"sw",labelDetails:{detail:" $t1,100",description:"Store Word"},kind:14,documentation:"Store $t1 contents into effective memory word address"},
  {isPseudo:true,label:"sw",labelDetails:{detail:" $t1,100000",description:"Store Word"},kind:14,documentation:"Store $t1 contents into effective memory word address"},
  {isPseudo:true,label:"sw",labelDetails:{detail:" $t1,100($t2)",description:"Store Word"},kind:14,documentation:"Store $t1 contents into effective memory word address"},
  {isPseudo:true,label:"sw",labelDetails:{detail:" $t1,100000($t2)",description:"Store Word"},kind:14,documentation:"Store $t1 contents into effective memory word address"},
  {isPseudo:true,label:"sw",labelDetails:{detail:" $t1,label",description:"Store Word"},kind:14,documentation:"Store $t1 contents into memory word at label's address"},
  {isPseudo:true,label:"sw",labelDetails:{detail:" $t1,label($t2)",description:"Store Word"},kind:14,documentation:"Store $t1 contents into effective memory word address"},
  {isPseudo:true,label:"sw",labelDetails:{detail:" $t1,label+100000",description:"Store Word"},kind:14,documentation:"Store $t1 contents into effective memory word address"},
  {isPseudo:true,label:"sw",labelDetails:{detail:" $t1,label+100000($t2)",description:"Store Word"},kind:14,documentation:"Store $t1 contents into effective memory word address"},

  {isPseudo:true,label:"lh",labelDetails:{detail:" $t1,($t2)",description:"Load Halfword"},kind:14,documentation:"Set $t1 to sign-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lh",labelDetails:{detail:" $t1,-100",description:"Load Halfword"},kind:14,documentation:"Set $t1 to sign-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lh",labelDetails:{detail:" $t1,100",description:"Load Halfword"},kind:14,documentation:"Set $t1 to sign-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lh",labelDetails:{detail:" $t1,100000",description:"Load Halfword"},kind:14,documentation:"Set $t1 to sign-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lh",labelDetails:{detail:" $t1,100($t2)",description:"Load Halfword"},kind:14,documentation:"Set $t1 to sign-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lh",labelDetails:{detail:" $t1,100000($t2)",description:"Load Halfword"},kind:14,documentation:"Set $t1 to sign-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lh",labelDetails:{detail:" $t1,label",description:"Load Halfword"},kind:14,documentation:"Set $t1 to sign-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lh",labelDetails:{detail:" $t1,label($t2)",description:"Load Halfword"},kind:14,documentation:"Set $t1 to sign-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lh",labelDetails:{detail:" $t1,label+100000",description:"Load Halfword"},kind:14,documentation:"Set $t1 to sign-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lh",labelDetails:{detail:" $t1,label+100000($t2)",description:"Load Halfword"},kind:14,documentation:"Set $t1 to sign-extended 16-bit value from effective memory halfword address"},

  {isPseudo:true,label:"sh",labelDetails:{detail:" $t1,($t2)",description:"Store Halfword"},kind:14,documentation:"Store the low-order 16 bits of $t1 into the effective memory halfword address"},
  {isPseudo:true,label:"sh",labelDetails:{detail:" $t1,-100",description:"Store Halfword"},kind:14,documentation:"Store the low-order 16 bits of $t1 into the effective memory halfword address"},
  {isPseudo:true,label:"sh",labelDetails:{detail:" $t1,100",description:"Store Halfword"},kind:14,documentation:"Store the low-order 16 bits of $t1 into the effective memory halfword address"},
  {isPseudo:true,label:"sh",labelDetails:{detail:" $t1,100000",description:"Store Halfword"},kind:14,documentation:"Store the low-order 16 bits of $t1 into the effective memory halfword address"},
  {isPseudo:true,label:"sh",labelDetails:{detail:" $t1,100($t2)",description:"Store Halfword"},kind:14,documentation:"Store the low-order 16 bits of $t1 into the effective memory halfword address"},
  {isPseudo:true,label:"sh",labelDetails:{detail:" $t1,100000($t2)",description:"Store Halfword"},kind:14,documentation:"Store the low-order 16 bits of $t1 into the effective memory halfword address"},
  {isPseudo:true,label:"sh",labelDetails:{detail:" $t1,label",description:"Store Halfword"},kind:14,documentation:"Store the low-order 16 bits of $t1 into the effective memory halfword address"},
  {isPseudo:true,label:"sh",labelDetails:{detail:" $t1,label($t2)",description:"Store Halfword"},kind:14,documentation:"Store the low-order 16 bits of $t1 into the effective memory halfword address"},
  {isPseudo:true,label:"sh",labelDetails:{detail:" $t1,label+100000",description:"Store Halfword"},kind:14,documentation:"Store the low-order 16 bits of $t1 into the effective memory halfword address"},
  {isPseudo:true,label:"sh",labelDetails:{detail:" $t1,label+100000($t2)",description:"Store Halfword"},kind:14,documentation:"Store the low-order 16 bits of $t1 into the effective memory halfword address"},

  {isPseudo:true,label:"lb",labelDetails:{detail:" $t1,($t2)",description:"Load Byte"},kind:14,documentation:"Set $t1 to sign-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lb",labelDetails:{detail:" $t1,-100",description:"Load Byte"},kind:14,documentation:"Set $t1 to sign-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lb",labelDetails:{detail:" $t1,100",description:"Load Byte"},kind:14,documentation:"Set $t1 to sign-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lb",labelDetails:{detail:" $t1,100000",description:"Load Byte"},kind:14,documentation:"Set $t1 to sign-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lb",labelDetails:{detail:" $t1,100($t2)",description:"Load Byte"},kind:14,documentation:"Set $t1 to sign-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lb",labelDetails:{detail:" $t1,100000($t2)",description:"Load Byte"},kind:14,documentation:"Set $t1 to sign-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lb",labelDetails:{detail:" $t1,label",description:"Load Byte"},kind:14,documentation:"Set $t1 to sign-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lb",labelDetails:{detail:" $t1,label($t2)",description:"Load Byte"},kind:14,documentation:"Set $t1 to sign-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lb",labelDetails:{detail:" $t1,label+100000",description:"Load Byte"},kind:14,documentation:"Set $t1 to sign-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lb",labelDetails:{detail:" $t1,label+100000($t2)",description:"Load Byte"},kind:14,documentation:"Set $t1 to sign-extended 8-bit value from effective memory byte address"},

  {isPseudo:true,label:"sb",labelDetails:{detail:" $t1,($t2)",description:"Store Byte"},kind:14,documentation:"Store the low-order 8 bits of $t1 into the effective memory byte address"},
  {isPseudo:true,label:"sb",labelDetails:{detail:" $t1,-100",description:"Store Byte"},kind:14,documentation:"Store the low-order 8 bits of $t1 into the effective memory byte address"},
  {isPseudo:true,label:"sb",labelDetails:{detail:" $t1,100",description:"Store Byte"},kind:14,documentation:"Store the low-order 8 bits of $t1 into the effective memory byte address"},
  {isPseudo:true,label:"sb",labelDetails:{detail:" $t1,100000",description:"Store Byte"},kind:14,documentation:"Store the low-order 8 bits of $t1 into the effective memory byte address"},
  {isPseudo:true,label:"sb",labelDetails:{detail:" $t1,100($t2)",description:"Store Byte"},kind:14,documentation:"Store the low-order 8 bits of $t1 into the effective memory byte address"},
  {isPseudo:true,label:"sb",labelDetails:{detail:" $t1,100000($t2)",description:"Store Byte"},kind:14,documentation:"Store the low-order 8 bits of $t1 into the effective memory byte address"},
  {isPseudo:true,label:"sb",labelDetails:{detail:" $t1,label",description:"Store Byte"},kind:14,documentation:"Store the low-order 8 bits of $t1 into the effective memory byte address"},
  {isPseudo:true,label:"sb",labelDetails:{detail:" $t1,label($t2)",description:"Store Byte"},kind:14,documentation:"Store the low-order 8 bits of $t1 into the effective memory byte address"},
  {isPseudo:true,label:"sb",labelDetails:{detail:" $t1,label+100000",description:"Store Byte"},kind:14,documentation:"Store the low-order 8 bits of $t1 into the effective memory byte address"},
  {isPseudo:true,label:"sb",labelDetails:{detail:" $t1,label+100000($t2)",description:"Store Byte"},kind:14,documentation:"Store the low-order 8 bits of $t1 into the effective memory byte address"},

  {isPseudo:true,label:"lhu",labelDetails:{detail:" $t1,($t2)",description:"Load Halfword Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lhu",labelDetails:{detail:" $t1,-100",description:"Load Halfword Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lhu",labelDetails:{detail:" $t1,100",description:"Load Halfword Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lhu",labelDetails:{detail:" $t1,100000",description:"Load Halfword Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lhu",labelDetails:{detail:" $t1,100($t2)",description:"Load Halfword Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lhu",labelDetails:{detail:" $t1,100000($t2)",description:"Load Halfword Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lhu",labelDetails:{detail:" $t1,label",description:"Load Halfword Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lhu",labelDetails:{detail:" $t1,label($t2)",description:"Load Halfword Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lhu",labelDetails:{detail:" $t1,label+100000",description:"Load Halfword Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 16-bit value from effective memory halfword address"},
  {isPseudo:true,label:"lhu",labelDetails:{detail:" $t1,label+100000($t2)",description:"Load Halfword Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 16-bit value from effective memory halfword address"},

  {isPseudo:true,label:"lbu",labelDetails:{detail:" $t1,($t2)",description:"Load Byte Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lbu",labelDetails:{detail:" $t1,-100",description:"Load Byte Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lbu",labelDetails:{detail:" $t1,100",description:"Load Byte Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lbu",labelDetails:{detail:" $t1,100000",description:"Load Byte Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lbu",labelDetails:{detail:" $t1,100($t2)",description:"Load Byte Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lbu",labelDetails:{detail:" $t1,100000($t2)",description:"Load Byte Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lbu",labelDetails:{detail:" $t1,label",description:"Load Byte Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lbu",labelDetails:{detail:" $t1,label($t2)",description:"Load Byte Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lbu",labelDetails:{detail:" $t1,label+100000",description:"Load Byte Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 8-bit value from effective memory byte address"},
  {isPseudo:true,label:"lbu",labelDetails:{detail:" $t1,label+100000($t2)",description:"Load Byte Unsigned"},kind:14,documentation:"Set $t1 to zero-extended 8-bit value from effective memory byte address"},

  {isPseudo:true,label:"lwl",labelDetails:{detail:" $t1,($t2)",description:"Load Word Left"},kind:14,documentation:"Load from 1 to 4 bytes left-justified into $t1, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"lwl",labelDetails:{detail:" $t1,-100",description:"Load Word Left"},kind:14,documentation:"Load from 1 to 4 bytes left-justified into $t1, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"lwl",labelDetails:{detail:" $t1,100",description:"Load Word Left"},kind:14,documentation:"Load from 1 to 4 bytes left-justified into $t1, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"lwl",labelDetails:{detail:" $t1,100000",description:"Load Word Left"},kind:14,documentation:"Load from 1 to 4 bytes left-justified into $t1, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"lwl",labelDetails:{detail:" $t1,100($t2)",description:"Load Word Left"},kind:14,documentation:"Load from 1 to 4 bytes left-justified into $t1, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"lwl",labelDetails:{detail:" $t1,100000($t2)",description:"Load Word Left"},kind:14,documentation:"Load from 1 to 4 bytes left-justified into $t1, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"lwl",labelDetails:{detail:" $t1,label",description:"Load Word Left"},kind:14,documentation:"Load from 1 to 4 bytes left-justified into $t1, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"lwl",labelDetails:{detail:" $t1,label($t2)",description:"Load Word Left"},kind:14,documentation:"Load from 1 to 4 bytes left-justified into $t1, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"lwl",labelDetails:{detail:" $t1,label+100000",description:"Load Word Left"},kind:14,documentation:"Load from 1 to 4 bytes left-justified into $t1, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"lwl",labelDetails:{detail:" $t1,label+100000($t2)",description:"Load Word Left"},kind:14,documentation:"Load from 1 to 4 bytes left-justified into $t1, starting with effective memory byte address and continuing through the low-order byte of its word"},

  {isPseudo:true,label:"swl",labelDetails:{detail:" $t1,($t2)",description:"Store Word Left"},kind:14,documentation:"Store high-order 1 to 4 bytes of $t1 into memory, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"swl",labelDetails:{detail:" $t1,-100",description:"Store Word Left"},kind:14,documentation:"Store high-order 1 to 4 bytes of $t1 into memory, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"swl",labelDetails:{detail:" $t1,100",description:"Store Word Left"},kind:14,documentation:"Store high-order 1 to 4 bytes of $t1 into memory, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"swl",labelDetails:{detail:" $t1,100000",description:"Store Word Left"},kind:14,documentation:"Store high-order 1 to 4 bytes of $t1 into memory, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"swl",labelDetails:{detail:" $t1,100($t2)",description:"Store Word Left"},kind:14,documentation:"Store high-order 1 to 4 bytes of $t1 into memory, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"swl",labelDetails:{detail:" $t1,100000($t2)",description:"Store Word Left"},kind:14,documentation:"Store high-order 1 to 4 bytes of $t1 into memory, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"swl",labelDetails:{detail:" $t1,label",description:"Store Word Left"},kind:14,documentation:"Store high-order 1 to 4 bytes of $t1 into memory, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"swl",labelDetails:{detail:" $t1,label($t2)",description:"Store Word Left"},kind:14,documentation:"Store high-order 1 to 4 bytes of $t1 into memory, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"swl",labelDetails:{detail:" $t1,label+100000",description:"Store Word Left"},kind:14,documentation:"Store high-order 1 to 4 bytes of $t1 into memory, starting with effective memory byte address and continuing through the low-order byte of its word"},
  {isPseudo:true,label:"swl",labelDetails:{detail:" $t1,label+100000($t2)",description:"Store Word Left"},kind:14,documentation:"Store high-order 1 to 4 bytes of $t1 into memory, starting with effective memory byte address and continuing through the low-order byte of its word"},

  {isPseudo:true,label:"lwr",labelDetails:{detail:" $t1,($t2)",description:"Load Word Right"},kind:14,documentation:"Load from 1 to 4 bytes right-justified into $t1, starting with effective memory byte address and continuing through the high-order byte of its word"},
  {isPseudo:true,label:"lwr",labelDetails:{detail:" $t1,-100",description:"Load Word Right"},kind:14,documentation:"Load from 1 to 4 bytes right-justified into $t1, starting with effective memory byte address and continuing through the high-order byte of its word"},
  {isPseudo:true,label:"lwr",labelDetails:{detail:" $t1,100",description:"Load Word Right"},kind:14,documentation:"Load from 1 to 4 bytes right-justified into $t1, starting with effective memory byte address and continuing through the high-order byte of its word"},
  {isPseudo:true,label:"lwr",labelDetails:{detail:" $t1,100000",description:"Load Word Right"},kind:14,documentation:"Load from 1 to 4 bytes right-justified into $t1, starting with effective memory byte address and continuing through the high-order byte of its word"},
  {isPseudo:true,label:"lwr",labelDetails:{detail:" $t1,100($t2)",description:"Load Word Right"},kind:14,documentation:"Load from 1 to 4 bytes right-justified into $t1, starting with effective memory byte address and continuing through the high-order byte of its word"},
  {isPseudo:true,label:"lwr",labelDetails:{detail:" $t1,100000($t2)",description:"Load Word Right"},kind:14,documentation:"Load from 1 to 4 bytes right-justified into $t1, starting with effective memory byte address and continuing through the high-order byte of its word"},
  {isPseudo:true,label:"lwr",labelDetails:{detail:" $t1,label",description:"Load Word Right"},kind:14,documentation:"Load from 1 to 4 bytes right-justified into $t1, starting with effective memory byte address and continuing through the high-order byte of its word"},
  {isPseudo:true,label:"lwr",labelDetails:{detail:" $t1,label($t2)",description:"Load Word Right"},kind:14,documentation:"Load from 1 to 4 bytes right-justified into $t1, starting with effective memory byte address and continuing through the high-order byte of its word"},
  {isPseudo:true,label:"lwr",labelDetails:{detail:" $t1,label+100000",description:"Load Word Right"},kind:14,documentation:"Load from 1 to 4 bytes right-justified into $t1, starting with effective memory byte address and continuing through the high-order byte of its word"},
  {isPseudo:true,label:"lwr",labelDetails:{detail:" $t1,label+100000($t2)",description:"Load Word Right"},kind:14,documentation:"Load from 1 to 4 bytes right-justified into $t1, starting with effective memory byte address and continuing through the high-order byte of its word"},

  {isPseudo:true,label:"swr",labelDetails:{detail:" $t1,($t2)",description:"Store Word Right"},kind:14,documentation:"Store low-order 1 to 4 bytes of $t1 into memory, starting with high-order byte of word containing effective memory byte address and continuing through that byte address"},
  {isPseudo:true,label:"swr",labelDetails:{detail:" $t1,-100",description:"Store Word Right"},kind:14,documentation:"Store low-order 1 to 4 bytes of $t1 into memory, starting with high-order byte of word containing effective memory byte address and continuing through that byte address"},
  {isPseudo:true,label:"swr",labelDetails:{detail:" $t1,100",description:"Store Word Right"},kind:14,documentation:"Store low-order 1 to 4 bytes of $t1 into memory, starting with high-order byte of word containing effective memory byte address and continuing through that byte address"},
  {isPseudo:true,label:"swr",labelDetails:{detail:" $t1,100000",description:"Store Word Right"},kind:14,documentation:"Store low-order 1 to 4 bytes of $t1 into memory, starting with high-order byte of word containing effective memory byte address and continuing through that byte address"},
  {isPseudo:true,label:"swr",labelDetails:{detail:" $t1,100($t2)",description:"Store Word Right"},kind:14,documentation:"Store low-order 1 to 4 bytes of $t1 into memory, starting with high-order byte of word containing effective memory byte address and continuing through that byte address"},
  {isPseudo:true,label:"swr",labelDetails:{detail:" $t1,100000($t2)",description:"Store Word Right"},kind:14,documentation:"Store low-order 1 to 4 bytes of $t1 into memory, starting with high-order byte of word containing effective memory byte address and continuing through that byte address"},
  {isPseudo:true,label:"swr",labelDetails:{detail:" $t1,label",description:"Store Word Right"},kind:14,documentation:"Store low-order 1 to 4 bytes of $t1 into memory, starting with high-order byte of word containing effective memory byte address and continuing through that byte address"},
  {isPseudo:true,label:"swr",labelDetails:{detail:" $t1,label($t2)",description:"Store Word Right"},kind:14,documentation:"Store low-order 1 to 4 bytes of $t1 into memory, starting with high-order byte of word containing effective memory byte address and continuing through that byte address"},
  {isPseudo:true,label:"swr",labelDetails:{detail:" $t1,label+100000",description:"Store Word Right"},kind:14,documentation:"Store low-order 1 to 4 bytes of $t1 into memory, starting with high-order byte of word containing effective memory byte address and continuing through that byte address"},
  {isPseudo:true,label:"swr",labelDetails:{detail:" $t1,label+100000($t2)",description:"Store Word Right"},kind:14,documentation:"Store low-order 1 to 4 bytes of $t1 into memory, starting with high-order byte of word containing effective memory byte address and continuing through that byte address"},

  {isPseudo:true,label:"ll",labelDetails:{detail:" $t1,($t2)",description:"Load Linked"},kind:14,documentation:"Paired with Store Conditional (sc) to perform atomic read-modify-write.  Treated as equivalent to Load Word (lw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"ll",labelDetails:{detail:" $t1,-100",description:"Load Linked"},kind:14,documentation:"Paired with Store Conditional (sc) to perform atomic read-modify-write.  Treated as equivalent to Load Word (lw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"ll",labelDetails:{detail:" $t1,100",description:"Load Linked"},kind:14,documentation:"Paired with Store Conditional (sc) to perform atomic read-modify-write.  Treated as equivalent to Load Word (lw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"ll",labelDetails:{detail:" $t1,100000",description:"Load Linked"},kind:14,documentation:"Paired with Store Conditional (sc) to perform atomic read-modify-write.  Treated as equivalent to Load Word (lw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"ll",labelDetails:{detail:" $t1,100($t2)",description:"Load Linked"},kind:14,documentation:"Paired with Store Conditional (sc) to perform atomic read-modify-write.  Treated as equivalent to Load Word (lw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"ll",labelDetails:{detail:" $t1,100000($t2)",description:"Load Linked"},kind:14,documentation:"Paired with Store Conditional (sc) to perform atomic read-modify-write.  Treated as equivalent to Load Word (lw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"ll",labelDetails:{detail:" $t1,label",description:"Load Linked"},kind:14,documentation:"Paired with Store Conditional (sc) to perform atomic read-modify-write.  Treated as equivalent to Load Word (lw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"ll",labelDetails:{detail:" $t1,label($t2)",description:"Load Linked"},kind:14,documentation:"Paired with Store Conditional (sc) to perform atomic read-modify-write.  Treated as equivalent to Load Word (lw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"ll",labelDetails:{detail:" $t1,label+100000",description:"Load Linked"},kind:14,documentation:"Paired with Store Conditional (sc) to perform atomic read-modify-write.  Treated as equivalent to Load Word (lw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"ll",labelDetails:{detail:" $t1,label+100000($t2)",description:"Load Linked"},kind:14,documentation:"Paired with Store Conditional (sc) to perform atomic read-modify-write.  Treated as equivalent to Load Word (lw) because MARS does not simulate multiple processors."},

  {isPseudo:true,label:"sc",labelDetails:{detail:" $t1,($t2)",description:"Store Conditional"},kind:14,documentation:"Paired with Load Linked (ll) to perform atomic read-modify-write.  Treated as equivalent to Store Word (sw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"sc",labelDetails:{detail:" $t1,-100",description:"Store Conditional"},kind:14,documentation:"Paired with Load Linked (ll) to perform atomic read-modify-write.  Treated as equivalent to Store Word (sw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"sc",labelDetails:{detail:" $t1,100",description:"Store Conditional"},kind:14,documentation:"Paired with Load Linked (ll) to perform atomic read-modify-write.  Treated as equivalent to Store Word (sw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"sc",labelDetails:{detail:" $t1,100000",description:"Store Conditional"},kind:14,documentation:"Paired with Load Linked (ll) to perform atomic read-modify-write.  Treated as equivalent to Store Word (sw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"sc",labelDetails:{detail:" $t1,100($t2)",description:"Store Conditional"},kind:14,documentation:"Paired with Load Linked (ll) to perform atomic read-modify-write.  Treated as equivalent to Store Word (sw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"sc",labelDetails:{detail:" $t1,100000($t2)",description:"Store Conditional"},kind:14,documentation:"Paired with Load Linked (ll) to perform atomic read-modify-write.  Treated as equivalent to Store Word (sw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"sc",labelDetails:{detail:" $t1,label",description:"Store Conditional"},kind:14,documentation:"Paired with Load Linked (ll) to perform atomic read-modify-write.  Treated as equivalent to Store Word (sw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"sc",labelDetails:{detail:" $t1,label($t2)",description:"Store Conditional"},kind:14,documentation:"Paired with Load Linked (ll) to perform atomic read-modify-write.  Treated as equivalent to Store Word (sw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"sc",labelDetails:{detail:" $t1,label+100000",description:"Store Conditional"},kind:14,documentation:"Paired with Load Linked (ll) to perform atomic read-modify-write.  Treated as equivalent to Store Word (sw) because MARS does not simulate multiple processors."},
  {isPseudo:true,label:"sc",labelDetails:{detail:" $t1,label+100000($t2)",description:"Store Conditional"},kind:14,documentation:"Paired with Load Linked (ll) to perform atomic read-modify-write.  Treated as equivalent to Store Word (sw) because MARS does not simulate multiple processors."},
 
  // Unaligned and double loads and stores
  {isPseudo:true,label:"ulw",labelDetails:{detail:" $t1,-100($t2)",description:"Unaligned Load Word"},kind:14,documentation:"Set $t1 to the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ulh",labelDetails:{detail:" $t1,-100($t2)",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, sign-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulhu",labelDetails:{detail:" $t1,-100($t2)",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, zero-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ld",labelDetails:{detail:" $t1,-100($t2)",description:"Load Doubleword"},kind:14,documentation:"Set $t1 and the next register to the 64 bits starting at effective memory byte address"},
  {isPseudo:true,label:"usw",labelDetails:{detail:" $t1,-100($t2)",description:"Unaligned Store Word"},kind:14,documentation:"Store $t1 contents into the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ush",labelDetails:{detail:" $t1,-100($t2)",description:"Unaligned Store Halfword"},kind:14,documentation:"Store low-order halfword $t1 contents into the 16 bits starting at effective memory byte address"},
  {isPseudo:true,label:"sd",labelDetails:{detail:" $t1,-100($t2)",description:"Store Doubleword"},kind:14,documentation:"Store contents of $t1 and the next register to the 64 bits starting at effective memory byte address"},

  // remaining adress modes
  {isPseudo:true,label:"ulw",labelDetails:{detail:" $t1,100000",description:"Unaligned Load Word"},kind:14,documentation:"Set $t1 to the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ulw",labelDetails:{detail:" $t1,label",description:"Unaligned Load Word"},kind:14,documentation:"Set $t1 to the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ulw",labelDetails:{detail:" $t1,label+100000",description:"Unaligned Load Word"},kind:14,documentation:"Set $t1 to the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ulw",labelDetails:{detail:" $t1,($t2)",description:"Unaligned Load Word"},kind:14,documentation:"Set $t1 to the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ulw",labelDetails:{detail:" $t1,100000($t2)",description:"Unaligned Load Word"},kind:14,documentation:"Set $t1 to the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ulw",labelDetails:{detail:" $t1,label($t2)",description:"Unaligned Load Word"},kind:14,documentation:"Set $t1 to the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ulw",labelDetails:{detail:" $t1,label+100000($t2)",description:"Unaligned Load Word"},kind:14,documentation:"Set $t1 to the 32 bits starting at effective memory byte address"},

  {isPseudo:true,label:"ulh",labelDetails:{detail:" $t1,100000",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, sign-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulh",labelDetails:{detail:" $t1,label",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, sign-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulh",labelDetails:{detail:" $t1,label+100000",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, sign-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulh",labelDetails:{detail:" $t1,($t2)",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, sign-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulh",labelDetails:{detail:" $t1,100000($t2)",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, sign-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulh",labelDetails:{detail:" $t1,label($t2)",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, sign-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulh",labelDetails:{detail:" $t1,label+100000($t2)",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, sign-extended, starting at effective memory byte address"},

  {isPseudo:true,label:"ulhu",labelDetails:{detail:" $t1,100000",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, zero-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulhu",labelDetails:{detail:" $t1,label",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, zero-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulhu",labelDetails:{detail:" $t1,label+100000",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, zero-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulhu",labelDetails:{detail:" $t1,($t2)",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, zero-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulhu",labelDetails:{detail:" $t1,100000($t2)",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, zero-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulhu",labelDetails:{detail:" $t1,label($t2)",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, zero-extended, starting at effective memory byte address"},
  {isPseudo:true,label:"ulhu",labelDetails:{detail:" $t1,label+100000($t2)",description:"Unaligned Load Halfword"},kind:14,documentation:"Set $t1 to the 16 bits, zero-extended, starting at effective memory byte address"},

  {isPseudo:true,label:"ld",labelDetails:{detail:" $t1,100000",description:"Load Doubleword"},kind:14,documentation:"Set $t1 and the next register to the 64 bits starting at effective memory word address"},
  {isPseudo:true,label:"ld",labelDetails:{detail:" $t1,label",description:"Load Doubleword"},kind:14,documentation:"Set $t1 and the next register to the 64 bits starting at effective memory word address"},
  {isPseudo:true,label:"ld",labelDetails:{detail:" $t1,label+100000",description:"Load Doubleword"},kind:14,documentation:"Set $t1 and the next register to the 64 bits starting at effective memory word address"},
  {isPseudo:true,label:"ld",labelDetails:{detail:" $t1,($t2)",description:"Load Doubleword"},kind:14,documentation:"Set $t1 and the next register to the 64 bits starting at effective memory word address"},
  {isPseudo:true,label:"ld",labelDetails:{detail:" $t1,100000($t2)",description:"Load Doubleword"},kind:14,documentation:"Set $t1 and the next register to the 64 bits starting at effective memory word address"},
  {isPseudo:true,label:"ld",labelDetails:{detail:" $t1,label($t2)",description:"Load Doubleword"},kind:14,documentation:"Set $t1 and the next register to the 64 bits starting at effective memory word address"},
  {isPseudo:true,label:"ld",labelDetails:{detail:" $t1,label+100000($t2)",description:"Load Doubleword"},kind:14,documentation:"Set $t1 and the next register to the 64 bits starting at effective memory word address"},

  {isPseudo:true,label:"usw",labelDetails:{detail:" $t1,100000",description:"Unaligned Store Word"},kind:14,documentation:"Store $t1 contents into the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"usw",labelDetails:{detail:" $t1,label",description:"Unaligned Store Word"},kind:14,documentation:"Store $t1 contents into the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"usw",labelDetails:{detail:" $t1,label+100000",description:"Unaligned Store Word"},kind:14,documentation:"Store $t1 contents into the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"usw",labelDetails:{detail:" $t1,($t2)",description:"Unaligned Store Word"},kind:14,documentation:"Store $t1 contents into the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"usw",labelDetails:{detail:" $t1,100000($t2)",description:"Unaligned Store Word"},kind:14,documentation:"Store $t1 contents into the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"usw",labelDetails:{detail:" $t1,label($t2)",description:"Unaligned Store Word"},kind:14,documentation:"Store $t1 contents into the 32 bits starting at effective memory byte address"},
  {isPseudo:true,label:"usw",labelDetails:{detail:" $t1,label+100000($t2)",description:"Unaligned Store Word"},kind:14,documentation:"Store $t1 contents into the 32 bits starting at effective memory byte address"},

  {isPseudo:true,label:"ush",labelDetails:{detail:" $t1,100000",description:"Unaligned Store Halfword"},kind:14,documentation:"Store low-order halfword $t1 contents into the 16 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ush",labelDetails:{detail:" $t1,label",description:"Unaligned Store Halfword"},kind:14,documentation:"Store low-order halfword $t1 contents into the 16 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ush",labelDetails:{detail:" $t1,label+100000",description:"Unaligned Store Halfword"},kind:14,documentation:"Store low-order halfword $t1 contents into the 16 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ush",labelDetails:{detail:" $t1,($t2)",description:"Unaligned Store Halfword"},kind:14,documentation:"Store low-order halfword $t1 contents into the 16 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ush",labelDetails:{detail:" $t1,100000($t2)",description:"Unaligned Store Halfword"},kind:14,documentation:"Store low-order halfword $t1 contents into the 16 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ush",labelDetails:{detail:" $t1,label($t2)",description:"Unaligned Store Halfword"},kind:14,documentation:"Store low-order halfword $t1 contents into the 16 bits starting at effective memory byte address"},
  {isPseudo:true,label:"ush",labelDetails:{detail:" $t1,label+100000($t2)",description:"Unaligned Store Halfword"},kind:14,documentation:"Store low-order halfword $t1 contents into the 16 bits starting at effective memory byte address"},

  {isPseudo:true,label:"sd",labelDetails:{detail:" $t1,100000",description:"Store Doubleword"},kind:14,documentation:"Store contents of $t1 and the next register to the 64 bits starting at effective memory word address"},
  {isPseudo:true,label:"sd",labelDetails:{detail:" $t1,label",description:"Store Doubleword"},kind:14,documentation:"Store contents of $t1 and the next register to the 64 bits starting at effective memory word address"},
  {isPseudo:true,label:"sd",labelDetails:{detail:" $t1,label+100000",description:"Store Doubleword"},kind:14,documentation:"Store contents of $t1 and the next register to the 64 bits starting at effective memory word address"},
  {isPseudo:true,label:"sd",labelDetails:{detail:" $t1,($t2)",description:"Store Doubleword"},kind:14,documentation:"Store contents of $t1 and the next register to the 64 bits starting at effective memory word address"},
  {isPseudo:true,label:"sd",labelDetails:{detail:" $t1,100000($t2)",description:"Store Doubleword"},kind:14,documentation:"Store contents of $t1 and the next register to the 64 bits starting at effective memory word address"},
  {isPseudo:true,label:"sd",labelDetails:{detail:" $t1,label($t2)",description:"Store Doubleword"},kind:14,documentation:"Store contents of $t1 and the next register to the 64 bits starting at effective memory word address"},
  {isPseudo:true,label:"sd",labelDetails:{detail:" $t1,label+100000($t2)",description:"Store Doubleword"},kind:14,documentation:"Store contents of $t1 and the next register to the 64 bits starting at effective memory word address"},

  // Load and Store for floating point
  {isPseudo:true,label:"lwc1",labelDetails:{detail:" $f1,($t2)",description:"Load Word Coprocessor 1"},kind:14,documentation:"Set $f1 to 32-bit value from effective memory word address"},
  {isPseudo:true,label:"lwc1",labelDetails:{detail:" $f1,-100",description:"Load Word Coprocessor 1"},kind:14,documentation:"Set $f1 to 32-bit value from effective memory word address"},
  {isPseudo:true,label:"lwc1",labelDetails:{detail:" $f1,100000",description:"Load Word Coprocessor 1"},kind:14,documentation:"Set $f1 to 32-bit value from effective memory word address"},
  {isPseudo:true,label:"lwc1",labelDetails:{detail:" $f1,100000($t2)",description:"Load Word Coprocessor 1"},kind:14,documentation:"Set $f1 to 32-bit value from effective memory word address"},
  {isPseudo:true,label:"lwc1",labelDetails:{detail:" $f1,label",description:"Load Word Coprocessor 1"},kind:14,documentation:"Set $f1 to 32-bit value from effective memory word address"},
  {isPseudo:true,label:"lwc1",labelDetails:{detail:" $f1,label($t2)",description:"Load Word Coprocessor 1"},kind:14,documentation:"Set $f1 to 32-bit value from effective memory word address"},
  {isPseudo:true,label:"lwc1",labelDetails:{detail:" $f1,label+100000",description:"Load Word Coprocessor 1"},kind:14,documentation:"Set $f1 to 32-bit value from effective memory word address"},
  {isPseudo:true,label:"lwc1",labelDetails:{detail:" $f1,label+100000($t2)",description:"Load Word Coprocessor 1"},kind:14,documentation:"Set $f1 to 32-bit value from effective memory word address"},

  {isPseudo:true,label:"ldc1",labelDetails:{detail:" $f2,($t2)",description:"Load Doubleword Coprocessor 1"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"ldc1",labelDetails:{detail:" $f2,-100",description:"Load Doubleword Coprocessor 1"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"ldc1",labelDetails:{detail:" $f2,100000",description:"Load Doubleword Coprocessor 1"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"ldc1",labelDetails:{detail:" $f2,100000($t2)",description:"Load Doubleword Coprocessor 1"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"ldc1",labelDetails:{detail:" $f2,label",description:"Load Doubleword Coprocessor 1"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"ldc1",labelDetails:{detail:" $f2,label($t2)",description:"Load Doubleword Coprocessor 1"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"ldc1",labelDetails:{detail:" $f2,label+100000",description:"Load Doubleword Coprocessor 1"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"ldc1",labelDetails:{detail:" $f2,label+100000($t2)",description:"Load Doubleword Coprocessor 1"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},

  {isPseudo:true,label:"swc1",labelDetails:{detail:" $f1,($t2)",description:"Store Word Coprocessor 1"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"swc1",labelDetails:{detail:" $f1,-100",description:"Store Word Coprocessor 1"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"swc1",labelDetails:{detail:" $f1,100000",description:"Store Word Coprocessor 1"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"swc1",labelDetails:{detail:" $f1,100000($t2)",description:"Store Word Coprocessor 1"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"swc1",labelDetails:{detail:" $f1,label",description:"Store Word Coprocessor 1"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"swc1",labelDetails:{detail:" $f1,label($t2)",description:"Store Word Coprocessor 1"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"swc1",labelDetails:{detail:" $f1,label+100000",description:"Store Word Coprocessor 1"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"swc1",labelDetails:{detail:" $f1,label+100000($t2)",description:"Store Word Coprocessor 1"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},

  {isPseudo:true,label:"sdc1",labelDetails:{detail:" $f2,($t2)",description:"Store Doubleword Coprocessor 1"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"sdc1",labelDetails:{detail:" $f2,-100",description:"Store Doubleword Coprocessor 1"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"sdc1",labelDetails:{detail:" $f2,100000",description:"Store Doubleword Coprocessor 1"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"sdc1",labelDetails:{detail:" $f2,100000($t2)",description:"Store Doubleword Coprocessor 1"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"sdc1",labelDetails:{detail:" $f2,label",description:"Store Doubleword Coprocessor 1"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"sdc1",labelDetails:{detail:" $f2,label($t2)",description:"Store Doubleword Coprocessor 1"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"sdc1",labelDetails:{detail:" $f2,label+100000",description:"Store Doubleword Coprocessor 1"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"sdc1",labelDetails:{detail:" $f2,label+100000($t2)",description:"Store Doubleword Coprocessor 1"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},

  {isPseudo:true,label:"l.s",labelDetails:{detail:" $f1,($t2)",description:"Load floating point Single precision"},kind:14,documentation:"Set $f1 to 32-bit value at effective memory word address"},
  {isPseudo:true,label:"l.s",labelDetails:{detail:" $f1,-100",description:"Load floating point Single precision"},kind:14,documentation:"Set $f1 to 32-bit value at effective memory word address"},
  {isPseudo:true,label:"l.s",labelDetails:{detail:" $f1,100000",description:"Load floating point Single precision"},kind:14,documentation:"Set $f1 to 32-bit value at effective memory word address"},
  {isPseudo:true,label:"l.s",labelDetails:{detail:" $f1,100000($t2)",description:"Load floating point Single precision"},kind:14,documentation:"Set $f1 to 32-bit value at effective memory word address"},
  {isPseudo:true,label:"l.s",labelDetails:{detail:" $f1,label",description:"Load floating point Single precision"},kind:14,documentation:"Set $f1 to 32-bit value at effective memory word address"},
  {isPseudo:true,label:"l.s",labelDetails:{detail:" $f1,label($t2)",description:"Load floating point Single precision"},kind:14,documentation:"Set $f1 to 32-bit value at effective memory word address"},
  {isPseudo:true,label:"l.s",labelDetails:{detail:" $f1,label+100000",description:"Load floating point Single precision"},kind:14,documentation:"Set $f1 to 32-bit value at effective memory word address"},
  {isPseudo:true,label:"l.s",labelDetails:{detail:" $f1,label+100000($t2)",description:"Load floating point Single precision"},kind:14,documentation:"Set $f1 to 32-bit value at effective memory word address"},

  {isPseudo:true,label:"s.s",labelDetails:{detail:" $f1,($t2)",description:"Store floating point Single precision"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"s.s",labelDetails:{detail:" $f1,-100",description:"Store floating point Single precision"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"s.s",labelDetails:{detail:" $f1,100000",description:"Store floating point Single precision"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"s.s",labelDetails:{detail:" $f1,100000($t2)",description:"Store floating point Single precision"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"s.s",labelDetails:{detail:" $f1,label",description:"Store floating point Single precision"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"s.s",labelDetails:{detail:" $f1,label($t2)",description:"Store floating point Single precision"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"s.s",labelDetails:{detail:" $f1,label+100000",description:"Store floating point Single precision"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},
  {isPseudo:true,label:"s.s",labelDetails:{detail:" $f1,label+100000($t2)",description:"Store floating point Single precision"},kind:14,documentation:"Store 32-bit value from $f1 to effective memory word address"},

  {isPseudo:true,label:"l.d",labelDetails:{detail:" $f2,($t2)",description:"Load floating point Double precision"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"l.d",labelDetails:{detail:" $f2,-100",description:"Load floating point Double precision"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"l.d",labelDetails:{detail:" $f2,100000",description:"Load floating point Double precision"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"l.d",labelDetails:{detail:" $f2,100000($t2)",description:"Load floating point Double precision"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"l.d",labelDetails:{detail:" $f2,label",description:"Load floating point Double precision"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"l.d",labelDetails:{detail:" $f2,label($t2)",description:"Load floating point Double precision"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"l.d",labelDetails:{detail:" $f2,label+100000",description:"Load floating point Double precision"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},
  {isPseudo:true,label:"l.d",labelDetails:{detail:" $f2,label+100000($t2)",description:"Load floating point Double precision"},kind:14,documentation:"Set $f2 and $f3 register pair to 64-bit value at effective memory doubleword address"},

  {isPseudo:true,label:"s.d",labelDetails:{detail:" $f2,($t2)",description:"Store floating point Double precision"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"s.d",labelDetails:{detail:" $f2,-100",description:"Store floating point Double precision"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"s.d",labelDetails:{detail:" $f2,100000",description:"Store floating point Double precision"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"s.d",labelDetails:{detail:" $f2,100000($t2)",description:"Store floating point Double precision"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"s.d",labelDetails:{detail:" $f2,label",description:"Store floating point Double precision"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"s.d",labelDetails:{detail:" $f2,label($t2)",description:"Store floating point Double precision"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"s.d",labelDetails:{detail:" $f2,label+100000",description:"Store floating point Double precision"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
  {isPseudo:true,label:"s.d",labelDetails:{detail:" $f2,label+100000($t2)",description:"Store floating point Double precision"},kind:14,documentation:"Store 64 bits from $f2 and $f3 register pair to effective memory doubleword address"},
]